searchState.loadedDescShard("universal_hash", 0, "Traits for Universal Hash Functions.\nBlocks are inputs to a <code>UniversalHash</code>.\nSize of the inputs to and outputs from the universal hash …\nError type for when the <code>Output</code> of a <code>UniversalHash</code> is not …\nKeys to a <code>UniversalHash</code>.\nSize of the key for the universal hash function.\nInstantiate a <code>UniversalHash</code> algorithm.\nOutputs of universal hash functions which are a thin …\nThe <code>UniversalHash</code> trait defines a generic interface for …\nType aliases for many constants.\nObtain the <code>Output</code> of a <code>UniversalHash</code> function and consume …\nObtain the <code>Output</code> of a <code>UniversalHash</code> computation and reset …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inner <code>GenericArray</code> this type wraps\nInstantiate a universal hash function with the given key.\nCreate a new <code>Output</code> block.\nReset <code>UniversalHash</code> instance.\nInput a block into the universal hash function\nInput data into the universal hash function. If the length …\nVerify the <code>UniversalHash</code> of the processed input matches a …\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing the integer 0.")