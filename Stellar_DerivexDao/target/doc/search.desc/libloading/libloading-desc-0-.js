searchState.loadedDescShard("libloading", 0, "Bindings around the platform’s dynamic library loading …\nCould not create a new CString.\nCould not create a new CString from bytes with trailing …\nThe <code>dlclose</code> call failed.\nThe <code>dlclose</code> call failed and system did not report an error.\nThe <code>dlopen</code> call failed.\nThe <code>dlopen</code> call failed and system did not report an error.\nThe <code>dlsym</code> call failed.\nThe <code>dlsym</code> call failed and system did not report an error.\nErrors.\nThe <code>FreeLibrary</code> call failed.\nThe <code>FreeLibrary</code> call failed and system did not report an …\nThe <code>GetModuleHandleExW</code> call failed.\nThe <code>GetModuleHandleExW</code> call failed and system did not …\nThe <code>GetProcAddress</code> call failed.\nThe <code>GetProcAddressUnknown</code> call failed and system did not …\nThe requested type cannot possibly work.\nA loaded dynamic library.\nThe <code>LoadLibraryW</code> call failed.\nThe <code>LoadLibraryW</code> call failed and system did not report an …\nSymbol from a library.\nThe change log.\nUnload the library.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrap the <code>os::platform::Symbol</code> into this safe wrapper.\nGet a pointer to a function or static variable by symbol …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the wrapped <code>os::platform::Symbol</code>.\nConverts a library name to a filename generally …\nLift Option out of the symbol.\nFind and load a dynamic library.\nUnsafe but flexible platform-specific bindings to dynamic …\nTry to convert the symbol into a raw pointer. Success …\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nRelease 0.3.0 (2016-07-27)\nRelease 0.3.1 (2016-10-01)\nRelease 0.3.2 (2017-02-10)\nRelease 0.3.3 (2017-03-25)\nRelease 0.3.4 (2017-03-25)\nRelease 0.4.0 (2017-05-01)\nRelease 0.4.1 (2017-08-29)\nRelease 0.4.2 (2017-09-24)\nRelease 0.4.3 (2017-12-07)\nRelease 0.5.0 (2018-01-11)\nRelease 0.5.1 (2019-06-01)\nRelease 0.5.2 (2019-07-07)\nRelease 0.6.0 (2020-04-05)\nRelease 0.6.1 (2020-04-15)\nRelease 0.6.2 (2020-05-06)\nRelease 0.6.3 (2020-08-22)\nRelease 0.6.4 (2020-10-10)\nRelease 0.6.5 (2020-10-23)\nRelease 0.6.6 (2020-12-03)\nRelease 0.6.7 (2021-01-14)\nRelease 0.7.0 (2021-02-06)\nRelease 0.7.1 (2021-10-09)\nRelease 0.7.2 (2021-11-14)\nRelease 0.7.3 (2022-01-15)\nRelease 0.7.4 (2022-11-07)\nRelease 0.8.0 (2023-04-11)\nRelease 0.8.1 (2023-09-30)\nRelease 0.8.2 (2024-03-01)\nRelease 0.8.3 (2024-03-05)\nRelease 0.8.4 (2024-06-23)\nWindows implementation of dynamic library loading.\nDo not check AppLocker rules or apply Software Restriction …\nMap the file into the calling process’ virtual address …\nMap the file into the calling process’ virtual address …\nMap the file into the process’ virtual address space as …\nSpecifies that the digital signature of the binary image …\nAllow loading a DLL for execution from the current …\nSearch the application’s installation directory for the …\nSearch default directories when looking for the DLL and …\nDirectory that contains the DLL is temporarily added to …\nSearch <code>%windows%\\system32</code> for the DLL and its dependencies.\nDirectories added using the <code>AddDllDirectory</code> or the …\nIf <code>filename</code> specifies an absolute path, the system uses …\nThe platform-specific counterpart of the cross-platform …\nA symbol from a library.\nConvert the loaded <code>Symbol</code> into a raw pointer.\nUnload the library.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a raw handle to a <code>Library</code>.\nGet a pointer to a function or static variable by symbol …\nGet a pointer to a function or static variable by ordinal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>Library</code> to a raw handle.\nConvert the loaded <code>Symbol</code> into a handle.\nLift Option out of the symbol.\nFind and load a module, additionally adjusting behaviour …\nFind and load a module.\nGet a module that is already loaded by the program.\nGet the <code>Library</code> representing the original program …")