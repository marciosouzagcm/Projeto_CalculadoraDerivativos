searchState.loadedDescShard("clipboard_win", 0, "This crate provide simple means to operate with Windows …\nClipboard instance, which allows to perform clipboard ops.\nContains the error value\nDescribes error code of particular category.\nDescribes format getter, specifying data type as type param\nContains the success value\nDescribes format setter, specifying data type as type param\nAlias to result used by this crate\nGets reference to underlying Category.\nStandard clipboard formats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve data from clipboard.\nShortcut to retrieve data from clipboard.\nShortcut to retrieve string from clipboard.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if underlying error indicates operation can …\nGets last POSIX error\nGets last System error\nInitializes error code with provided category\nAttempts to open clipboard, returning clipboard instance …\nAttempts to open clipboard, giving it <code>num</code> retries in case …\nAttempts to open clipboard, giving it <code>num</code> retries in case …\nAttempts to open clipboard, associating it with specified …\nCreates new POSIX error code.\nCreates new System error code.\nConfiguration options\nRaw bindings to Windows clipboard.\nGets raw error code.\nReads content of clipboard into <code>out</code>, returning number of …\nSet data onto clipboard.\nShortcut to set data onto clipboard.\nShortcut to set string onto clipboard.\nWINAPI related types\nRuns provided callable with open clipboard, returning …\nRuns provided callable with open clipboard, returning …\nWrites content of <code>data</code> onto clipboard, returning whether …\nFormat for bitmap images i.e. <code>CF_BITMAP</code>.\nA handle to a bitmap (HBITMAP).\nA memory object containing a BITMAPINFO structure followed …\nA memory object containing a BITMAPV5HEADER structure …\nSoftware Arts’ Data Interchange Format.\nBitmap display format associated with a private format. …\nEnhanced metafile display format associated with a private …\nMetafile-picture display format associated with a private …\nText display format associated with a private format. The …\nA handle to an enhanced metafile (HENHMETAFILE).\nStart of a range of integer values for application-defined …\nEnd of a range of integer values for application-defined …\nA handle to type HDROP that identifies a list of files.\nThe data is a handle to the locale identifier associated …\nHandle to a metafile picture format as defined by the …\nText format containing characters in the OEM character set.\nOwner-display format.\nHandle to a color palette.\nData for the pen extensions to the Microsoft Windows for …\nStart of a range of integer values for private clipboard …\nEnd of a range of integer values for private clipboard …\nRepresents audio data more complex than can be represented …\nMicrosoft Symbolic Link (SYLK) format.\nANSI text format.\nTagged-image file format.\nUTF16 text format.\nRepresents audio data in one of the standard wave formats.\nFormat for file lists (generated by drag &amp; drop).\nFormat trait\nHTML Foramt\nFormat to write/read from clipboard as raw bytes\nFormat to read/write unicode string.\nGets raw format code\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether format is present on clipboard\nCreates new instance, if possible\nClearing parameter\nPerforms clearing of clipboard before pasting\nEmpty behavior definition\nFunction type to empty clipboard\nPerforms no clearing of clipboard\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnumerator over available clipboard formats.\nCloses clipboard.\nRetrieves number of currently available formats on …\nEmpties clipboard.\nReturns format name based on it’s code.\nReturns format name based on it’s code (allocating …\nReturns the argument unchanged.\nConstructs enumerator that starts from format.\nCopies raw bytes from clipboard with specified <code>format</code>\nReads bitmap image, appending image to the <code>out</code> vector and …\nRetrieves raw pointer to clipboard data.\nRetrieves file list from clipboard, appending each element …\nRetrieves HTML using format code created by …\nRetrieves the window handle of the current owner of the …\nCopies raw bytes from clipboard with specified <code>format</code>, …\nCopies raw bytes from clipboard with specified <code>format</code>, …\nCalls <code>U::from(self)</code>.\nDetermines whenever provided clipboard format is available …\nConstructs enumerator over all available formats.\nReturns next format on clipboard.\nOpens clipboard.\nOpens clipboard associating it with specified window …\nRegisters a new clipboard format with specified name.\nRegisters a new clipboard format with specified name as C …\nResets enumerator to list all available formats.\nRetrieves clipboard sequence number.\nCopies raw bytes onto clipboard with specified <code>format</code>, …\nSets bitmap (header + RGB) onto clipboard, from raw bytes.\nSets bitmap (header + RGB) onto clipboard, from raw bytes.\nSet list of file paths to clipboard.\nSet list of file paths to clipboard.\nSets HTML using format code created by <code>register_raw_format</code> …\nSets HTML using format code created by <code>register_raw_format</code> …\nCopies unicode string onto clipboard, performing necessary …\nCopies unicode string onto clipboard, performing necessary …\nCopies raw bytes onto the clipboard with the specified …\nRetrieves size of clipboard data for specified format.\nRelies on <code>count_formats</code> so it is only reliable when …\nRetrieves size of clipboard data for specified format.\nReturns the first available format in the specified list.\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")