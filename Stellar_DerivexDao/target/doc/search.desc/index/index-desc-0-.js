searchState.loadedDescShard("index", 0, "<code>sled</code> is a flash-sympathetic persistent lock-free B+ tree.\nAn atomic operation has failed, and the current value is …\nA finalized <code>ConfigBuilder</code> that can be use multiple times …\nTop-level configuration for the system.\nCorruption has been detected in the storage file.\nThe top-level result type for dealing with the PageCache.\nContains the error value\nAn Error type encapsulating various issues that may come up\nA read or write error has happened when interacting with …\natomic lock-free tree An iterator over keys and values in …\nContains the success value\nAn unexpected bug has happened. Please open an issue on …\natomic lock-free tree A flash-sympathetic persistent …\nThe system has been used in an unsupported way.\nb-link node fanout, minimum of 2\nFinalize the configuration.\nlog base 2 of the number of cache shards\nmaximum size for the system page cache\nthe maximum length of a cached page fragment chain\nCompare and swap. Capable of unique creation, conditional …\nTurns an <code>Error&lt;A&gt;</code> into an <code>Error&lt;B&gt;</code>.\nTurns an <code>Error&lt;A&gt;</code> into an <code>Error&lt;B&gt;</code>.\nDelete a value, returning the last result if it existed.\nencryption key for the database\nFlushes any pending IO buffers to disk to ensure …\nnumber of ms between IO buffer flushes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve a value from the <code>Tree</code> if it exists.\nGet the path of the database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsize of each io flush buffer. MUST be multiple of 512!\nnumber of io buffers\nIterate over the tuples of keys and values in this tree.\nthe minimum number of free segments to have on-deck before …\nminimum data chunks/pages in a segment.\nReturns a default <code>ConfigBuilder</code>\npage consolidation threshold\nSet the path of the database (builder).\nwhether to run in read-only mode\nIterate over tuples of keys and values, starting at the …\nthe proportion of remaining valid pages in the segment\nthe file segment selection mode\nSet a key to a new value.\nb-link node fanout, minimum of 2\nlog base 2 of the number of cache shards\nmaximum size for the system page cache\nthe maximum length of a cached page fragment chain\nencryption key for the database\nnumber of ms between IO buffer flushes\nsize of each io flush buffer. MUST be multiple of 512!\nnumber of io buffers\nthe minimum number of free segments to have on-deck before …\nminimum data chunks/pages in a segment.\npage consolidation threshold\nSet the path of the database\nwhether to run in read-only mode\nthe proportion of remaining valid pages in the segment\nthe file segment selection mode\nnumber of operations between page table snapshots\nsnapshot file location\nif this database should be removed after the ConfigBuilder …\nwhether to use zstd compression\nwhether to use the OS page cache\ndisabling of the log segment copy cleaner\nthe compression factor to use with zstd compression\nnumber of operations between page table snapshots\nsnapshot file location\nLoad existing or create a new <code>Tree</code>.\nif this database should be removed after the ConfigBuilder …\nwhether to use zstd compression\nwhether to use the OS page cache\ndisabling of the log segment copy cleaner\nthe compression factor to use with zstd compression\nThe file location that corrupted data was found at.")