searchState.loadedDescShard("atomic", 0, "Generic <code>Atomic&lt;T&gt;</code> wrapper type\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nA generic atomic wrapper type which allows an object to be …\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nStores a value into the <code>Atomic</code> if the current value is the …\nStores a value into the <code>Atomic</code> if the current value is the …\nAn atomic fence.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nAdd to the current value, returning the previous value.\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nLogical “and” with a boolean value.\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nLogical “or” with a boolean value.\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nLogical “xor” with a boolean value.\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nChecks if <code>Atomic</code> objects of this type are lock-free.\nLoads a value from the <code>Atomic</code>.\nCreates a new <code>Atomic</code>.\nStores a value into the <code>Atomic</code>.\nStores a value into the <code>Atomic</code>, returning the old value.")