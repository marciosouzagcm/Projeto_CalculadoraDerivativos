searchState.loadedDescShard("json", 0, "Contains the error value\nError type of this crate.\nContains the success value\nResult type used by this crate.\nHelper macro for creating instances of <code>JsonValue::Array</code>.\nWorks on <code>JsonValue::Array</code> - remove an entry and return the …\nAnalog to <code>as_fixed_point_u64</code>, except returning a signed <code>i64</code>…\nObtain an integer at a fixed decimal point. This is useful …\nWhen called on an array or an object, will wipe them …\nWorks on <code>JsonValue::Array</code> - checks if the array contains a …\nPrints out the value as JSON string.\nWorks on <code>JsonValue::Object</code> - returns an iterator over key …\nWorks on <code>JsonValue::Object</code> - returns a mutable iterator …\nConvenience for <code>JsonValue::from(value)</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nWorks on <code>JsonValue::Object</code> - checks if the object has a key\nWorks on <code>JsonValue::Object</code> - inserts a new entry, or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the value is empty. Returns true for:\nReturns length of array or object (number of keys), …\nWorks on <code>JsonValue::Array</code> - returns an iterator over …\nWorks on <code>JsonValue::Array</code> - returns a mutable iterator …\nCreate an empty <code>JsonValue::Array</code> instance. When creating …\nCreate an empty <code>JsonValue::Object</code> instance. When creating …\nHelper macro for creating instances of <code>JsonValue::Object</code>.\nWorks on <code>JsonValue::Array</code> - remove and return last element …\nPretty prints out the value as JSON string. Takes an …\nWorks on <code>JsonValue::Array</code> - pushes a new value to the …\nWorks on <code>JsonValue::Object</code> - remove a key and return the …\nPretty prints out the value as JSON string.\nPretty prints out the value as JSON string. Second …\nTake over the ownership of the value, leaving <code>Null</code> in it’…\nChecks that self is a string, returns an owned Rust <code>String</code>…\nWrites the JSON as byte stream into an implementor of …\nHelper crate for converting types into <code>JsonValue</code>. It’s …\nWrites the JSON as byte stream into an implementor of …\nWrites the JSON as byte stream into an implementor of …\nIn-Memory Generator, this uses a Vec to store the JSON …\nDefault trait for serializing JSONValue into string.\nPretty In-Memory Generator, this uses a Vec to store the …\nPretty Writer Generator, this uses a custom writer to …\nWriter Generator, this uses a custom writer to store the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterator over key value pairs of <code>JsonValue::Object</code>.\nMutable iterator over key value pairs of <code>JsonValue::Object</code>.\nIterator over members of <code>JsonValue::Array</code>.\nMutable iterator over members of <code>JsonValue::Array</code>.\nNaN value represented in <code>Number</code> type. NaN is equal to …\nNumber representation used inside <code>JsonValue</code>. You can …\nError type generated when trying to convert a <code>Number</code> into …\nAnalog to <code>as_fixed_point_u64</code>, except returning a signed <code>i64</code>…\nObtain an integer at a fixed decimal point. This is useful …\nReverse to <code>from_parts</code> - obtain parts from an existing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>Number</code> from parts, stripping unnecessary …\nConstruct a new <code>Number</code> from parts. This can’t create a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest if the number is NaN or has a zero value.\nA binary tree implementation of a string -&gt; <code>JsonValue</code> map. …\nWipe the <code>Object</code> clear. The capacity will remain untouched.\nPrints out the value as JSON string.\nCreate an empty iterator that always returns <code>None</code>\nCreate an empty iterator that always returns <code>None</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a new entry, or override an existing one. Note that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new, empty instance of <code>Object</code>. Empty <code>Object</code> …\nPretty prints out the value as JSON string. Takes an …\nAttempts to remove the value behind <code>key</code>, if successful …\nCreate a new <code>Object</code> with memory preallocated for <code>capacity</code> …\nCheaply obtain a <code>&amp;str</code> slice out of the <code>Short</code>.\nReturns the argument unchanged.\nCreates a <code>Short</code> from a <code>&amp;str</code> slice. This method can cause …\nCalls <code>U::from(self)</code>.")