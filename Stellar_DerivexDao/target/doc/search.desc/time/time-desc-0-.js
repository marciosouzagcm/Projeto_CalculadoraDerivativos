searchState.loadedDescShard("time", 0, "GitHub time-rs/time license MIT or Apache-2.0 minimum …\nCalendar date.\nA span of time with nanosecond precision.\nContains the error value\nVarious well-known formats, along with the possibility for …\nA measurement of a monotonically non-decreasing clock. …\nA negative value.\nA <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.\nContains the success value\nA positive value.\nCombined date and time.\nAn alias for <code>Result</code> with a generic error from the time …\nContains the sign of a value: positive, negative, or zero.\nThe clock time within a given date. Nanosecond precision.\nA <code>UtcOffset</code> that is UTC.\nAn offset from UTC.\nDays of the week.\nA value that is exactly zero.\nGet the absolute value of the duration.\nAdd the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…\nAdd the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …\nAdd the sub-day time of the <code>Duration</code> to the existing <code>Time</code>. …\nAdd the sub-day time of the <code>std::time::Duration</code> to the …\nGet the number of hours from UTC the value is. Positive is …\nGet the number of minutes from UTC the value is. Positive …\nGet the number of seconds from UTC the value is. Positive …\nGet the number of fractional seconds in the duration.\nGet the number of fractional seconds in the duration.\nGet the year, month, and day.\nGet the year and ordinal day number.\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nComputes <code>self + rhs</code>, returning <code>None</code> if an overflow …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nComputes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>.\nComputes <code>self * rhs</code>, returning <code>None</code> if an overflow …\nComputes <code>self - rhs</code>, returning <code>None</code> if an overflow …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nObtain the system’s current UTC offset. If the offset …\nGet the <code>Date</code> in the stored offset.\nGet the <code>Date</code> component of the <code>PrimitiveDateTime</code>.\nConstruct a <code>Date</code> with a statically known value.\nGet the day of the month. If fetching both the month and …\nEquivalent to <code>1.days()</code>.\nGet the day of the date in the stored offset. If fetching …\nGet the day of the date.  If fetching both the month and …\nCreate a new <code>Duration</code> with the given number of days. …\n<code>Sign</code> defaults to <code>Zero</code>.\nCreate a <code>UtcOffset</code> representing an easterly offset by the …\nCreate a <code>UtcOffset</code> representing an easterly offset by the …\nCreate a <code>UtcOffset</code> representing an easterly offset by the …\nReturns the amount of time elapsed since this instant was …\nVarious error types returned by methods in the time crate.\nExtension traits.\nFormat the <code>Date</code> using the provided string.\nFormat the <code>OffsetDateTime</code> using the provided string.\nFormat the <code>PrimitiveDateTime</code> using the provided string.\nFormat the <code>Time</code> using the provided string.\nFormat the <code>UtcOffset</code> using the provided string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Date</code> from the Julian day.\nCreate an <code>OffsetDateTime</code> from the provided Unix timestamp.\nCreate a <code>PrimitiveDateTime</code> from the provided Unix timestamp…\nConstruct an <code>OffsetDateTime</code> from the provided Unix …\nEquivalent to <code>1.hours()</code>.\nGet the clock hour in the stored offset.\nGet the clock hour.\nGet the clock hour.\nCreate a new <code>Duration</code> with the given number of hours. …\nCreate a <code>UtcOffset</code> representing an offset by the number of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a duration is negative.\nIs the sign negative?\nCheck if a duration is positive.\nIs the sign positive?\nCheck if a duration is exactly zero.\nIs the value exactly zero?\nGet the ISO 8601 weekday number. Equivalent to …\nGet the ISO 8601 year and week number.\nGet the ISO 8601 year and week number in the stored offset.\nGet the ISO 8601 year and week number.\nGet the Julian day for the date.\nFormat the <code>Date</code> using the provided string.\nFormat the <code>OffsetDateTime</code> using the provided string.\nFormat the <code>PrimitiveDateTime</code> using the provided string.\nFormat the <code>Time</code> using the provided string.\nFormat the <code>UtcOffset</code> using the provided string.\nObtain the system’s UTC offset at a known moment in …\nMacros to statically construct values that are known to be …\nThe maximum possible duration. Adding any positive …\nEquivalent to <code>1.microseconds()</code>.\nGet the microseconds within the second in the stored …\nGet the microseconds within the second.\nGet the microseconds within the second.\nCreate a new <code>Duration</code> with the given number of …\nCreate a <code>PrimitiveDateTime</code> using the existing date. The …\nCreate a <code>Time</code> that is exactly midnight.\nEquivalent to <code>1.milliseconds()</code>.\nGet the milliseconds within the second in the stored …\nGet the milliseconds within the second.\nGet the milliseconds within the second.\nCreate a new <code>Duration</code> with the given number of …\nThe minimum possible duration. Adding any negative …\nEquivalent to <code>1.minutes()</code>.\nGet the minute within the hour in the stored offset.\nGet the minute within the hour.\nGet the minute within the hour.\nCreate a new <code>Duration</code> with the given number of minutes. …\nCreate a <code>UtcOffset</code> representing a offset by the number of …\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the month. If fetching both the month and day, it is …\nGet the month of the date in the stored offset. If …\nGet the month of the date. If fetching both the month and …\nGet the month and day. This is more efficient than …\nGet the month and day of the date in the stored offset.\nGet the month and day of the date. This is more efficient …\nEquivalent to <code>1.nanoseconds()</code>.\nGet the nanoseconds within the second in the stored offset.\nGet the nanoseconds within the second.\nGet the nanoseconds within the second.\nCreate a new <code>Duration</code> with the given number of nanoseconds.\nReturn the opposite of the current sign.\nCreate a new <code>Duration</code> with the provided seconds and …\nCreate a new <code>PrimitiveDateTime</code> from the provided <code>Date</code> and …\nGet the next weekday.\nGet the next calendar date.\nReturns an <code>Instant</code> corresponding to “now”.\nCreate a new <code>OffsetDateTime</code> with the current date and time …\nCreate a new <code>PrimitiveDateTime</code> with the current date and …\nCreate a <code>Time</code> representing the current time (UTC).\nCreate a new <code>OffsetDateTime</code> with the current date and time …\nCreate a new <code>OffsetDateTime</code> with the current date and time …\nGet the zero-indexed number of days from Monday.\nGet the zero-indexed number of days from Sunday.\nGet the one-indexed number of days from Monday.\nGet the one-indexed number of days from Sunday.\nGet the <code>UtcOffset</code>.\nConstruct a <code>UtcOffset</code> with a statically known value.\nGet the day of the year.\nGet the day of the year of the date in the stored offset.\nGet the day of the year.\nParse any parsable type from the time crate.\nAttempt to parse a <code>Date</code> using the provided string.\nAttempt to parse an <code>OffsetDateTime</code> using the provided …\nAttempt to parse a <code>PrimitiveDateTime</code> using the provided …\nAttempt to parse a <code>Time</code> using the provided string.\nAttempt to parse the <code>UtcOffset</code> using the provided string.\nA collection of imports that are widely useful.\nGet the previous weekday.\nGet the previous calendar date.\nEquivalent to <code>1.seconds()</code>.\nGet the second within the minute in the stored offset.\nGet the second within the minute.\nGet the second within the minute.\nCreate a new <code>Duration</code> with the given number of seconds.\nCreate a <code>UtcOffset</code> representing an offset by the number of …\nCreates a new <code>Duration</code> from the specified number of seconds\nCreates a new <code>Duration</code> from the specified number of seconds\nGet the sign of the duration.\nSubtract the sub-day time of the <code>std::time::Duration</code> from …\nSubtract two <code>Time</code>s, returning the <code>Duration</code> between. This …\nSubtract the sub-day time of the <code>Duration</code> from the <code>Time</code>. …\nSubtract the sub-day time of the <code>std::time::Duration</code> from …\nSubtract the sub-day time of the <code>Duration</code> from the …\nGet the number of microseconds past the number of whole …\nGet the number of milliseconds past the number of whole …\nGet the number of nanoseconds past the number of whole …\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the <code>Time</code> in the stored offset.\nGet the <code>Time</code> component of the <code>PrimitiveDateTime</code>.\nConstruct a <code>Time</code> with a statically known value.\nRuns a closure, returning the duration of time it took to …\nGet the Unix timestamp.\nGet the Unix timestamp representing the <code>PrimitiveDateTime</code>.\nGet the Unix timestamp in nanoseconds.\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nCreate a <code>Date</code> representing the current date.\nAttempt to obtain the system’s current UTC offset. If …\nAttempt to create a <code>Time</code> from the hour, minute, and second.\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nAttempt to create a <code>Date</code> from the ISO year, week, and …\nAttempt to create a <code>Date</code> from the year, month, and day.\nAttempt to create a <code>Date</code> from the year and ordinal day …\nAttempt to obtain the system’s UTC offset at a known …\nAttempt to create a new <code>OffsetDateTime</code> with the current …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nMidnight, 1 January, 1970 (UTC).\nMidnight, 1 January, 1970 (UTC).\nGet the Unix timestamp.\nGet the Unix timestamp in nanoseconds.\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nUtility functions.\nGet the ISO week number.\nEquivalent to <code>1.weeks()</code>.\nGet the ISO week number of the date in the stored offset.\nGet the ISO week number.\nGet the weekday.\nGet the weekday of the date in the stored offset.\nGet the weekday.\nCreate a new <code>Duration</code> with the given number of weeks. …\nCreate a <code>UtcOffset</code> representing a westerly offset by the …\nCreate a <code>UtcOffset</code> representing a westerly offset by the …\nCreate a <code>UtcOffset</code> representing a westerly offset by the …\nGet the number of whole days in the duration.\nGet the number of whole hours in the duration.\nGet the number of whole microseconds in the duration.\nGet the number of whole milliseconds in the duration.\nGet the number of whole minutes in the duration.\nGet the number of nanoseconds in the duration.\nGet the number of whole seconds in the duration.\nGet the number of whole weeks in the duration.\nCreate a <code>PrimitiveDateTime</code> using the existing date and the …\nGet the year of the date.\nGet the year of the date in the stored offset.\nGet the year of the date.\nEquivalent to <code>0.seconds()</code>.\nA component was out of range.\nAn error type indicating that a component provided to a …\nAn error type indicating that a conversion failed because …\nA unified error type for anything returned by a method in …\nAn error occurred while formatting.\nThe system’s UTC offset could not be determined at the …\nThere was not enough information provided to create the …\nThe format provided requires more information than the …\nThe AM/PM was not valid.\nThe day of month present was not valid.\nThe day of week present was not valid.\nThe day of year present was not valid.\nThe character following <code>%</code> is not valid.\nThe hour present was not valid.\nThe minute present was not valid.\nThe month present was not valid.\nThe nanosecond present was not valid.\nThe UTC offset present was not valid.\nThe second present was not valid.\nThe week present was not valid.\nThe year present was not valid.\nThere was no character following a <code>%</code>.\nAn error occurred while parsing.\nAn error occurred while formatting into the provided …\nA character literal was expected to be present but was not.\nThe string ended, but there should be more content.\nThe minimum and/or maximum value is conditional on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum allowed value, inclusive.\nMinimum allowed value, inclusive.\nName of the component.\nValue that was provided.\nThe character that was present in the string.\nThe character that was expected to be present.\nCreate <code>Duration</code>s from primitive and core numeric types.\nCreate <code>std::time::Duration</code>s from primitive and core …\nCreate <code>std::time::Duration</code>s from primitive and core …\nCreate a <code>Duration</code> from the number of days.\nCreate a <code>std::time::Duration</code> from the number of days.\nCreate a <code>Duration</code> from the number of hours.\nCreate a <code>std::time::Duration</code> from the number of hours.\nCreate a <code>Duration</code> from the number of microseconds.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>Duration</code> from the number of milliseconds.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>Duration</code> from the number of minutes.\nCreate a <code>std::time::Duration</code> from the number of minutes.\nCreate a <code>Duration</code> from the number of nanoseconds.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>Duration</code> from the number of seconds.\nCreate a <code>std::time::Duration</code> from the number of seconds.\nCreate a <code>std::time::Duration</code> from the number of days.\nCreate a <code>std::time::Duration</code> from the number of hours.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of minutes.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of seconds.\nCreate a <code>std::time::Duration</code> from the number of weeks.\nCreate a <code>Duration</code> from the number of weeks.\nCreate a <code>std::time::Duration</code> from the number of weeks.\nConstruct a <code>Date</code> with a statically known value.\nConstruct a <code>UtcOffset</code> with a statically known value.\nConstruct a <code>Time</code> with a statically known value.\nGet the number of calendar days in a given year.\nReturns if the provided year is a leap year in the …\nChecks if a user-provided formatting string is valid. If …\nGet the number of weeks in the ISO year.")