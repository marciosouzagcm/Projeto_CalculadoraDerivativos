searchState.loadedDescShard("ark_std", 3, "Returns the argument unchanged.\nCreates an array of type [T; N], where each element <code>T</code> is …\nConverts a mutable reference to <code>T</code> into a mutable reference …\nConverts a reference to <code>T</code> into a reference to an array of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new iterator over the given <code>array</code>.\nCreates an iterator over the elements in a …\nCreates an array of type <code>[T; N]</code> by repeatedly cloning a …\nCreates an array <code>[T; N]</code> where each fallible array element <code>T</code>…\nU+0006\nU+0026\nU+0027\nU+002A\nU+0008\nU+0007\nU+0018\nU+0041\nU+0042\nU+0043\nU+0044\nU+0045\nU+0046\nU+0047\nU+0048\nU+0049\nU+004A\nU+004B\nU+004C\nU+004D\nU+004E\nU+004F\nU+0050\nU+0051\nU+0052\nU+0053\nU+0054\nU+0055\nU+0056\nU+0057\nU+0058\nU+0059\nU+005A\nU+000D\nOne of the 128 Unicode characters from U+0000 through …\nU+0009\nU+005E\nU+003A\nU+002C\nU+0040\nU+0010\nU+007F\nU+0014\nU+0011\nU+0013\nU+0012\nU+0030\nU+0031\nU+0032\nU+0033\nU+0034\nU+0035\nU+0036\nU+0037\nU+0038\nU+0039\nU+0024\nU+0019\nU+0003\nU+0004\nU+0017\nU+0005\nU+003D\nU+001B\nAn iterator over the escaped version of a byte.\nU+0021\nU+000C\nU+002E\nU+0060\nU+003E\nU+002D\nU+001C\nU+001F\nU+001D\nU+001E\nU+007B\nU+0028\nU+005B\nU+003C\nU+000A\nU+000B\nU+005F\nU+0015\nU+0000 (The default variant)\nU+0023\nU+0025\nU+002B\nU+003F\nU+0022\nU+005C\nU+007D\nU+0029\nU+005D\nU+003B\nU+000F\nU+000E\nU+0061\nU+0062\nU+0063\nU+0064\nU+0065\nU+0066\nU+0067\nU+0068\nU+0069\nU+006A\nU+006B\nU+006C\nU+006D\nU+006E\nU+006F\nU+0070\nU+0071\nU+0072\nU+0073\nU+0074\nU+0075\nU+0076\nU+0077\nU+0078\nU+0079\nU+007A\nU+002F\nU+0020\nU+0001\nU+0002\nU+001A\nU+0016\nU+007E\nU+007C\nViews this ASCII character as a one-code-unit UTF-8 <code>str</code>.\nReturns the default value of <code>Null</code>\nWhen passed the <em>number</em> <code>0</code>, <code>1</code>, …, <code>9</code>, returns the <em>character</em> …\nWhen passed the <em>number</em> <code>0</code>, <code>1</code>, …, <code>9</code>, returns the <em>character</em> …\nReturns an iterator that produces an escaped version of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an ascii character from the byte <code>b</code>, or returns <code>None</code>…\nCreates an ASCII character from the byte <code>b</code>, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets this ASCII character as a <code>char</code> Unicode Scalar Value.\nGets this ASCII character as a byte.\nAsserts that an expression matches the provided pattern.\nAsserts that an expression matches the provided pattern.\nA trait for dealing with asynchronous iterators.\nAn async iterator that was created from iterator.\nThe type of the resulting iterator\nConverts something into an async iterator\nThe type of items yielded by the async iterator.\nThe type of the item yielded by the iterator\nReturns the argument unchanged.\nConverts an iterator into an async iterator.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into an async iterator\nAttempts to pull out the next value of this async …\nReturns the bounds on the remaining length of the async …\nAutomatic Differentiation macro which allows generating a …\nA trait for borrowing data.\nA trait for mutably borrowing data.\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nThe resulting type after obtaining ownership.\nA generalization of <code>Clone</code> to borrowed data.\nImmutably borrows from an owned value.\nMutably borrows from an owned value.\nUses borrowed data to replace owned data, usually by …\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nCreates a clone-on-write pointer from an owned instance of …\nCreates a clone-on-write pointer from a reference to …\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts the string reference into a <code>Cow::Borrowed</code>.\nMoves the string into a <code>Cow::Owned</code>.\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nReturns the argument unchanged.\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nAcquires a mutable reference to the owned form of the data.\nCreates owned data from borrowed data, usually by cloning.\nA pointer type that uniquely owns a heap allocation of …\nThinBox.\nReturns a reference to the underlying allocator.\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the <code>Box</code>’s contents.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nReturns the argument unchanged.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a reference.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a vector into a boxed slice.\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nReturns the argument unchanged.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nMoves a type to the heap with its <code>Metadata</code> stored in the …\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nAn error returned by <code>RefCell::try_borrow</code>.\nAn error returned by <code>RefCell::try_borrow_mut</code>.\nA mutable memory location.\nA value which is initialized on the first access.\nA cell which can nominally be written to only once.\nWraps a borrowed reference to a value in a <code>RefCell</code> box. A …\nA mutable memory location with dynamically checked borrow …\nA wrapper type for a mutably borrowed value from a …\n<code>UnsafeCell</code>, but <code>Sync</code>.\nThe core primitive for interior mutability in Rust.\nReturns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code>\nReturns a raw pointer to the underlying data in this cell.\nReturns a raw pointer to the underlying data in this cell.\nReturns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code>\nImmutably borrows the wrapped value.\nMutably borrows the wrapped value.\nPanics\nCopies a <code>Ref</code>.\nPanics\nPanics\nCreates a new lazy value using <code>Default</code> as the initializing …\nCreates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.\nCreates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.\nPanics\nMakes a new <code>Ref</code> for an optional component of the borrowed …\nMakes a new <code>RefMut</code> for an optional component of the …\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nReturns the argument unchanged.\nCreates a new <code>OnceCell&lt;T&gt;</code> which already contains the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Cell&lt;T&gt;</code> containing the given value.\nCreates a new <code>RefCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.\nReturns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>\nConverts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.\nPanics\nReturns a mutable reference to the value if initialized, …\nGets the reference to the underlying value.\nReturns a copy of the contained value.\nGets a mutable pointer to the wrapped value.\nGets a mutable pointer to the wrapped value.\nReturns a reference to the value if initialized, or <code>None</code> …\nGets the mutable reference to the underlying value.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nGets the mutable reference of the contents of the cell, …\nGets the mutable reference of the contents of the cell, …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nPanics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>LazyCell</code> returning the stored value.\nConsumes the cell, returning the wrapped value.\nUnwraps the value, consuming the cell.\nConsumes the <code>RefCell</code>, returning the wrapped value.\nUnwraps the value, consuming the cell.\nUnwraps the value, consuming the cell.\nPanics\nConverts into a reference to the underlying data.\nConverts into a mutable reference to the underlying data.\nPanics\nMakes a new <code>Ref</code> for a component of the borrowed data.\nMakes a new <code>RefMut</code> for a component of the borrowed data, …\nSplits a <code>Ref</code> into multiple <code>Ref</code>s for different components …\nSplits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …\nCreates a new lazy value with the given initializing …\nCreates a new empty cell.\nCreates a new <code>Cell</code> containing the given value.\nCreates a new <code>RefCell</code> containing <code>value</code>.\nConstructs a new instance of <code>UnsafeCell</code> which will wrap …\nConstructs a new instance of <code>SyncUnsafeCell</code> which will …\nPanics\nGets a mutable pointer to the wrapped value. The …\nGets a mutable pointer to the wrapped value.\nReplaces the contained value with <code>val</code>, and returns the old …\nReplaces the wrapped value with a new one, returning the …\nReplaces the wrapped value with a new one computed from <code>f</code>, …\nSets the contents of the cell to <code>value</code>.\nSets the contained value.\nSwaps the values of two <code>Cell</code>s.\nSwaps the wrapped value of <code>self</code> with the wrapped value of …\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nTakes the value of the cell, leaving <code>Default::default()</code> in …\nTakes the wrapped value, leaving <code>Default::default()</code> in its …\nImmutably borrows the wrapped value, returning an error if …\nMutably borrows the wrapped value, returning an error if …\nImmutably borrows the wrapped value, returning an error if …\nSets the contents of the cell to <code>value</code> if the cell was …\nUndo the effect of leaked guards on the borrow state of …\nUpdates the contained value using a function and returns …\nThe error type returned when a conversion from <code>u32</code> to <code>char</code> …\nAn iterator that decodes UTF-16 encoded code points from …\nAn error that can be returned when decoding UTF-16 code …\nAn iterator that yields the literal escape code of a <code>char</code>.\nAn iterator that yields the literal escape code of a <code>char</code>.\nReturns an iterator that yields the hexadecimal Unicode …\nThe highest valid code point a <code>char</code> can have, <code>&#39;\\u{10FFFF}&#39;</code>…\nAn error which can be returned when parsing a char.\n<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …\nReturns an iterator that yields the lowercase equivalent …\nReturns an iterator that yields the uppercase equivalent …\nThe error type returned when a checked char conversion …\nThe version of Unicode that the Unicode parts of <code>char</code> and …\nCreates an iterator over the UTF-16 encoded code points in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a digit in the given radix to a <code>char</code>. Use …\nConverts a <code>u32</code> to a <code>char</code>. Use <code>char::from_u32</code> instead.\nConverts a <code>u32</code> to a <code>char</code>, ignoring validity. Use …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the unpaired surrogate which caused this error.\nA common trait for the ability to explicitly duplicate an …\nDerive macro generating an impl of the trait <code>Clone</code>.\nA generalization of <code>Clone</code> to dynamically-sized types …\nReturns a copy of the value.\nPerforms copy-assignment from <code>source</code>.\nPerforms copy-assignment from <code>self</code> to <code>dst</code>.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nAn ordering where a compared value is equal to another.\nAn ordering where a compared value is greater than another.\nAn ordering where a compared value is less than another.\nTrait for types that form a total order.\nDerive macro generating an impl of the trait <code>Ord</code>. The …\nAn <code>Ordering</code> is the result of a comparison between two …\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nTrait for types that form a partial order.\nDerive macro generating an impl of the trait <code>PartialOrd</code>. …\nA helper struct for reverse ordering.\nRestrict a value to a certain interval.\nThis method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTests greater than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests greater than (for <code>self</code> and <code>other</code>) and is used by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the ordering is the <code>Equal</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…\nReturns <code>true</code> if the ordering is the <code>Greater</code> variant.\nReturns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …\nReturns <code>true</code> if the ordering is the <code>Less</code> variant.\nReturns <code>true</code> if the ordering is not the <code>Equal</code> variant.\nTests less than or equal to (for <code>self</code> and <code>other</code>) and is …\nTests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> …\nCompares and returns the maximum of two values.\nCompares and returns the maximum of two values.\nReturns the maximum of two values with respect to the …\nReturns the element that gives the maximum value from the …\nCompares and returns the minimum of two values.\nCompares and returns the minimum of two values.\nReturns the minimum of two values with respect to the …\nReturns the element that gives the minimum value from the …\nCompares and sorts two values, returning minimum and …\nReturns minimum and maximum values with respect to the …\nReturns minimum and maximum values with respect to the …\nTests for <code>!=</code>. The default implementation is almost always …\nThis method returns an ordering between <code>self</code> and <code>other</code> …\nReverses the <code>Ordering</code>.\nChains two orderings.\nChains the ordering with the given function.\nThe memory allocator returned an error\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nA priority queue implemented with a binary heap.\nError due to the computed capacity exceeding the collection…\nA doubly-linked list with owned nodes.\nThe error type for <code>try_reserve</code> methods.\nDetails of the allocation that caused a <code>TryReserveError</code>\nA double-ended queue implemented with a growable ring …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nMoves all elements from <code>other</code> to the end of the list.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a pair of slices which contain, in order, the …\nReturns a slice of all values in the underlying vector, in …\nReturns a pair of slices which contain, in order, the …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a reference to the back element, or <code>None</code> if the …\nProvides a mutable reference to the back element, or <code>None</code> …\nProvides a mutable reference to the back element, or <code>None</code> …\nA priority queue implemented with a binary heap.\nBinary searches this <code>VecDeque</code> for a given element. If the …\nBinary searches this <code>VecDeque</code> with a comparator function.\nBinary searches this <code>VecDeque</code> with a key extraction …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nAn ordered map based on a B-Tree.\nAn ordered set based on a B-Tree.\nReturns the number of elements the binary heap can hold …\nReturns the number of elements the deque can hold without …\nDrops all items from the binary heap.\nClears the map, removing all elements.\nClears the set, removing all elements.\nRemoves all elements from the <code>LinkedList</code>.\nClears the deque, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nOverwrites the contents of <code>self</code> with a clone of the …\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the set contains an element equal to the …\nReturns <code>true</code> if the <code>LinkedList</code> contains an element equal …\nReturns <code>true</code> if the deque contains an element equal to the …\nReturns <code>true</code> if the map contains a value for the specified …\nProvides a cursor at the back element.\nProvides a cursor with editing operations at the back …\nProvides a cursor at the front element.\nProvides a cursor with editing operations at the front …\nCreates an empty <code>BinaryHeap&lt;T&gt;</code>.\nCreates an empty <code>BTreeMap</code>.\nCreates an empty <code>BTreeSet</code>.\nCreates an empty <code>LinkedList&lt;T&gt;</code>.\nCreates an empty deque.\nVisits the elements representing the difference, i.e., the …\nClears the binary heap, returning an iterator over the …\nRemoves the specified range from the deque in bulk, …\nClears the binary heap, returning an iterator over the …\nGets the given key’s corresponding entry in the map for …\nCreates an iterator that visits all elements (key-value …\nCreates an iterator that visits all elements in ascending …\nCreates an iterator which uses a closure to determine if …\nReturns the contents of the “front” slice as returned …\nReturns a reference to the first element in the set, if …\nReturns the first entry in the map for in-place …\nReturns the first key-value pair in the map. The key in …\nConverts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.\nTurn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.\nReturns the argument unchanged.\nAlways evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.\nReturns the argument unchanged.\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a reference to the front element, or <code>None</code> if the …\nProvides a mutable reference to the front element, or <code>None</code> …\nProvides a mutable reference to the front element, or <code>None</code> …\nReturns a reference to the value corresponding to the key.\nReturns a reference to the element in the set, if any, …\nProvides a reference to the element at the given index.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nProvides a mutable reference to the element at the given …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nAdds a value to the set.\nInserts an element at <code>index</code> within the deque, shifting all …\nVisits the elements representing the intersection, i.e., …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nGets an owning iterator over the entries of the map, …\nGets an iterator for moving out the <code>BTreeSet</code>’s contents …\nConsumes the list into an iterator yielding elements by …\nConsumes the deque into a front-to-back iterator yielding …\nReturns an iterator which retrieves elements in heap order.\nCreates a consuming iterator visiting all the keys, in …\nConsumes the <code>BinaryHeap</code> and returns a vector in sorted …\nCreates a consuming iterator visiting all the values, in …\nConsumes the <code>BinaryHeap</code> and returns the underlying vector …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nChecks if the binary heap is empty.\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the <code>LinkedList</code> is empty.\nReturns <code>true</code> if the deque is empty.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nReturns an iterator visiting all values in the underlying …\nGets an iterator over the entries of the map, sorted by …\nGets an iterator that visits the elements in the <code>BTreeSet</code> …\nProvides a forward iterator.\nReturns a front-to-back iterator.\nGets a mutable iterator over the entries of the map, …\nProvides a forward iterator with mutable references.\nReturns a front-to-back iterator that returns mutable …\nGets an iterator over the keys of the map, in sorted order.\nDetails about the allocation that caused the error\nReturns a reference to the last element in the set, if any.\nReturns the last entry in the map for in-place …\nReturns the last key-value pair in the map. The key in …\nReturns the length of the binary heap.\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nReturns the length of the <code>LinkedList</code>.\nReturns the number of elements in the deque.\nA doubly-linked list with owned nodes.\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>Cursor</code> pointing at the gap before the smallest …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nReturns a <code>CursorMut</code> pointing at the gap before the …\nRearranges the internal storage of this deque so it is one …\nCreates an empty <code>BinaryHeap</code> as a max-heap.\nMakes a new, empty <code>BTreeMap</code>.\nMakes a new, empty <code>BTreeSet</code>.\nCreates an empty <code>LinkedList</code>.\nCreates an empty deque.\nCreates an empty <code>BinaryHeap</code> as a max-heap, using <code>A</code> as …\nMakes a new empty BTreeMap with a reasonable choice for B.\nMakes a new <code>BTreeSet</code> with a reasonable choice of B.\nConstructs an empty <code>LinkedList&lt;T, A&gt;</code>.\nCreates an empty deque.\nReturns the index of the partition point according to the …\nReturns the greatest item in the binary heap, or <code>None</code> if …\nReturns a mutable reference to the greatest item in the …\nRemoves the greatest item from the binary heap and returns …\nRemoves the last element from a list and returns it, or …\nRemoves the last element from the deque and returns it, or …\nRemoves and returns the first element in the map. The key …\nRemoves the first element from the set and returns it, if …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves the first element and returns it, or <code>None</code> if the …\nRemoves and returns the last element in the map. The key …\nRemoves the last element from the set and returns it, if …\nPushes an item onto the binary heap.\nAppends an element to the back of a list.\nAppends an element to the back of the deque.\nAdds an element first in the list.\nPrepends an element to the deque.\nConstructs a double-ended iterator over a sub-range of …\nConstructs a double-ended iterator over a sub-range of …\nCreates an iterator that covers the specified range in the …\nConstructs a mutable double-ended iterator over a …\nCreates an iterator that covers the specified mutable …\nFill <code>buf</code> with the contents of the “front” slice as …\nRemoves a key from the map, returning the value at the key …\nIf the set contains an element equal to the value, removes …\nRemoves the element at the given index and returns it.\nRemoves and returns the element at <code>index</code> from the deque. …\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing element, …\nReserves capacity for at least <code>additional</code> elements more …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> …\nReserves the minimum capacity for at least <code>additional</code> more …\nModifies the deque in-place so that <code>len()</code> is equal to …\nModifies the deque in-place so that <code>len()</code> is equal to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRotates the double-ended queue <code>n</code> places to the left.\nRotates the double-ended queue <code>n</code> places to the right.\nDiscards capacity with a lower bound.\nShrinks the capacity of the deque with a lower bound.\nDiscards as much additional capacity as possible.\nShrinks the capacity of the deque as much as possible.\nSplits the collection into two at the given key. Returns …\nSplits the collection into two at the value. Returns a new …\nSplits the list into two at the given index. Returns …\nSplits the deque into two at the given index.\nReturns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…\nSwaps elements at indices <code>i</code> and <code>j</code>.\nRemoves an element from anywhere in the deque and returns …\nRemoves an element from anywhere in the deque and returns …\nVisits the elements representing the symmetric difference, …\nRemoves and returns the element in the set, if any, that …\nShortens the deque, keeping the first <code>len</code> elements and …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> elements …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nTries to reserve the minimum capacity for at least …\nCreates an empty deque with space for at least <code>capacity</code> …\nVisits the elements representing the union, i.e., all the …\nReturns a <code>Cursor</code> pointing at the gap after the greatest key\nReturns a <code>Cursor</code> pointing at the gap after the greatest …\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nReturns a <code>CursorMut</code> pointing at the gap after the greatest …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nA double-ended queue (deque) implemented with a growable …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nCreates an empty deque with space for at least <code>capacity</code> …\nCreates an empty <code>BinaryHeap</code> with at least the specified …\nCreates an empty deque with space for at least <code>capacity</code> …\nThe layout of allocation request that failed\nA priority queue implemented with a binary heap.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nA draining iterator over the elements of a <code>BinaryHeap</code>.\nAn owning iterator over the elements of a <code>BinaryHeap</code>.\nAn iterator over the elements of a <code>BinaryHeap</code>.\nStructure wrapping a mutable reference to the greatest …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nCreates an empty <code>binary_heap::Iter</code>.\nCreates an empty <code>binary_heap::IntoIter</code>.\nRemoves heap elements in heap order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves the peeked value from the heap and returns it.\nAn ordered map based on a B-Tree.\nA cursor over a <code>BTreeMap</code>.\nA cursor over a <code>BTreeMap</code> with editing operations.\nA cursor over a <code>BTreeMap</code> with editing operations, and …\nA view into a single entry in a map, which may either be …\nAn iterator produced by calling <code>extract_if</code> on BTreeMap.\nAn owning iterator over the entries of a <code>BTreeMap</code>, sorted …\nAn owning iterator over the keys of a <code>BTreeMap</code>.\nAn owning iterator over the values of a <code>BTreeMap</code>.\nAn iterator over the entries of a <code>BTreeMap</code>.\nA mutable iterator over the entries of a <code>BTreeMap</code>.\nAn iterator over the keys of a <code>BTreeMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>BTreeMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\nAn iterator over a sub-range of entries in a <code>BTreeMap</code>.\nA mutable iterator over a sub-range of entries in a …\nError type returned by <code>CursorMut::insert_before</code> and …\nA vacant entry.\nA view into a vacant entry in a <code>BTreeMap</code>. It is part of …\nAn iterator over the values of a <code>BTreeMap</code>.\nA mutable iterator over the values of a <code>BTreeMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nCreates an empty <code>btree_map::Iter</code>.\nCreates an empty <code>btree_map::IterMut</code>.\nCreates an empty <code>btree_map::IntoIter</code>.\nCreates an empty <code>btree_map::Keys</code>.\nCreates an empty <code>btree_map::Values</code>.\nCreates an empty <code>btree_map::ValuesMut</code>.\nCreates an empty <code>btree_map::IntoKeys</code>.\nCreates an empty <code>btree_map::IntoValues</code>.\nCreates an empty <code>btree_map::Range</code>.\nCreates an empty <code>btree_map::RangeMut</code>.\nThe entry in the map that was already occupied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nInserts a new key-value pair into the map in the gap that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nAdvances the cursor to the next gap, returning the key and …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the next …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nReturns a reference to the key and value of the previous …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nAdvances the cursor to the previous gap, returning the key …\nTakes the value of the entry out of the map, and returns …\nTake ownership of the key and value from the map.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the next element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nRemoves the preceding element from the <code>BTreeMap</code>.\nThe value which was not inserted, because the entry was …\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nAn ordered set based on a B-Tree.\nA cursor over a <code>BTreeSet</code>.\nA cursor over a <code>BTreeSet</code> with editing operations.\nA cursor over a <code>BTreeSet</code> with editing operations, and …\nA lazy iterator producing elements in the difference of …\nAn iterator produced by calling <code>extract_if</code> on BTreeSet.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>BTreeSet</code> in …\nAn iterator over the items of a <code>BTreeSet</code>.\nAn iterator over a sub-range of items in a <code>BTreeSet</code>.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>BTreeSet</code>…\nError type returned by <code>CursorMut::insert_before</code> and …\nReturns a read-only cursor pointing to the same location …\nReturns a read-only cursor pointing to the same location …\nCreates an empty <code>btree_set::Iter</code>.\nCreates an empty <code>btree_set::IntoIter</code>.\nCreates an empty <code>btree_set::Range</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nInserts a new element into the set in the gap that the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdvances the cursor to the next gap, returning the element …\nAdvances the cursor to the next gap, returning the  …\nAdvances the cursor to the next gap, returning the element …\nReturns a reference to the next element without moving the …\nReturns a reference to the next element without moving the …\nReturns a reference to next element without moving the …\nReturns a reference to the previous element without moving …\nReturns a reference to the previous element without moving …\nReturns a reference to the previous element without moving …\nAdvances the cursor to the previous gap, returning the …\nAdvances the cursor to the previous gap, returning the …\nAdvances the cursor to the previous gap, returning the …\nRemoves the next element from the <code>BTreeSet</code>.\nRemoves the next element from the <code>BTreeSet</code>.\nRemoves the preceding element from the <code>BTreeSet</code>.\nRemoves the preceding element from the <code>BTreeSet</code>.\nConverts the cursor into a <code>CursorMutKey</code>, which allows …\nA cursor over a <code>LinkedList</code>.\nA cursor over a <code>LinkedList</code> with editing operations.\nAn iterator produced by calling <code>extract_if</code> on LinkedList.\nAn owning iterator over the elements of a <code>LinkedList</code>.\nAn iterator over the elements of a <code>LinkedList</code>.\nA mutable iterator over the elements of a <code>LinkedList</code>.\nA doubly-linked list with owned nodes.\nReturns a read-only cursor pointing to the current element.\nProvides a reference to the cursor’s parent list.\nProvides a read-only reference to the cursor’s parent …\nProvides a reference to the back element of the cursor’s …\nProvides a reference to the back element of the cursor’s …\nProvides a mutable reference to back element of the cursor…\nReturns a reference to the element that the cursor is …\nReturns a reference to the element that the cursor is …\nCreates an empty <code>linked_list::Iter</code>.\nCreates an empty <code>linked_list::IntoIter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides a reference to the front element of the cursor’…\nProvides a reference to the front element of the cursor’…\nProvides a mutable reference to the front element of the …\nReturns the cursor position index within the <code>LinkedList</code>.\nReturns the cursor position index within the <code>LinkedList</code>.\nInserts a new element into the <code>LinkedList</code> after the …\nInserts a new element into the <code>LinkedList</code> before the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the next element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nMoves the cursor to the previous element of the <code>LinkedList</code>.\nReturns a reference to the next element.\nReturns a reference to the next element.\nReturns a reference to the previous element.\nReturns a reference to the previous element.\nRemoves the last element from the cursor’s parent list …\nRemoves the first element from the cursor’s parent list …\nAppends an element to the back of the cursor’s parent …\nAppends an element to the front of the cursor’s parent …\nRemoves the current element from the <code>LinkedList</code>.\nRemoves the current element from the <code>LinkedList</code> without …\nInserts the elements from the given <code>LinkedList</code> after the …\nInserts the elements from the given <code>LinkedList</code> before the …\nSplits the list into two after the current element. This …\nSplits the list into two before the current element. This …\nA draining iterator over the elements of a <code>VecDeque</code>.\nAn owning iterator over the elements of a <code>VecDeque</code>.\nAn iterator over the elements of a <code>VecDeque</code>.\nA mutable iterator over the elements of a <code>VecDeque</code>.\nA double-ended queue implemented with a growable ring …\nCreates an empty <code>vec_deque::IterMut</code>.\nCreates an empty <code>vec_deque::Iter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to do a cheap mutable-to-mutable reference conversion.\nUsed to do a cheap reference-to-reference conversion.\nThe type returned in the event of a conversion error.\nThe type returned in the event of a conversion error.\nSupporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …\nUsed to do value-to-value conversions while consuming the …\nThe error type for errors that can never happen.\nA value-to-value conversion that consumes the input value. …\nSimple and safe type conversions that may fail in a …\nAn attempted conversion that consumes <code>self</code>, which may or …\nConverts this type into a mutable reference of the …\nConverts this type into a shared reference of the (usually …\nConverts to this type from the input type.\nReturns the argument unchanged.\nThe identity function.\nConverts this type into the (usually inferred) input type.\nCalls <code>U::from(self)</code>.\nPerforms the conversion.\nPerforms the conversion.\nA trait for giving a type a useful default value.\nDerive macro generating an impl of the trait <code>Default</code>.\nReturns the “default value” for a type.\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nApproximate number of significant digits in base 10. Use …\nMachine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.\nInfinity (∞). Use <code>f32::INFINITY</code> instead.\nNumber of significant digits in base 2. Use …\nLargest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.\nMaximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code> …\nMaximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> …\nSmallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.\nMinimum possible normal power of 10 exponent. Use …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> …\nNot a Number (NaN). Use <code>f32::NAN</code> instead.\nNegative infinity (−∞). Use <code>f32::NEG_INFINITY</code> instead.\nThe radix or base of the internal representation of <code>f32</code>. …\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nApproximate number of significant digits in base 10. Use …\nMachine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.\nInfinity (∞). Use <code>f64::INFINITY</code> instead.\nNumber of significant digits in base 2. Use …\nLargest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.\nMaximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code> …\nMaximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> …\nSmallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.\nMinimum possible normal power of 10 exponent. Use …\nOne greater than the minimum possible normal power of 2 …\nSmallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> …\nNot a Number (NaN). Use <code>f64::NAN</code> instead.\nNegative infinity (−∞). Use <code>f64::NEG_INFINITY</code> instead.\nThe radix or base of the internal representation of <code>f64</code>. …\nBasic mathematical constants.\nEuler’s number (e)\nThe Euler-Mascheroni constant (γ)\n1/π\n1/sqrt(2)\n1/sqrt(2π)\n1/sqrt(3)\n1/sqrt(π)\n2/π\n2/sqrt(π)\nπ/2\nπ/3\nπ/4\nπ/6\nπ/8\nln(10)\nln(2)\nlog10(2)\nlog10(e)\nlog2(10)\nlog2(e)\nThe golden ratio (φ)\nArchimedes’ constant (π)\nsqrt(2)\nsqrt(3)\nThe full circle constant (τ)\nPossible alignments returned by <code>Formatter::align</code>\nThis structure represents a safely precompiled version of …\n<code>b</code> formatting.\nIndication that contents should be center-aligned.\n<code>?</code> formatting.\nDerive macro generating an impl of the trait <code>Debug</code>.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nA struct to help with <code>fmt::Debug</code> implementations.\nFormat trait for an empty format, <code>{}</code>.\nContains the error value\nThe error type which is returned from formatting a message …\nConfiguration for formatting.\nImplements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.\nIndication that contents should be left-aligned.\n<code>e</code> formatting.\n<code>x</code> formatting.\n<code>o</code> formatting.\nContains the success value\n<code>p</code> formatting.\nThe type returned by formatter methods.\nIndication that contents should be right-aligned.\n<code>E</code> formatting.\n<code>X</code> formatting.\nA trait for writing or formatting into Unicode-accepting …\nReturns a flag indicating what form of alignment was …\nDetermines if the <code>#</code> flag was specified.\nGets the formatted string, if it has no arguments to be …\nCreates a <code>DebugList</code> builder designed to assist with …\nCreates a <code>DebugMap</code> builder designed to assist with …\nCreates a <code>DebugSet</code> builder designed to assist with …\nCreates a <code>DebugStruct</code> builder designed to assist with …\nCreates a <code>DebugTuple</code> builder designed to assist with …\nAdds the contents of an iterator of entries to the set …\nAdds the contents of an iterator of entries to the list …\nAdds the contents of an iterator of entries to the map …\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new entry to the map output.\nAdds a new entry to the set output.\nAdds a new entry to the list output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nAdds a new field to the generated struct output.\nAdds a new field to the generated tuple struct output.\nReturns the character used as ‘fill’ whenever there is …\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nFinishes output and returns any error encountered.\nMarks the struct as non-exhaustive, indicating to the …\nMarks the tuple struct as non-exhaustive, indicating to …\nMarks the set as non-exhaustive, indicating to the reader …\nMarks the list as non-exhaustive, indicating to the reader …\nMarks the map as non-exhaustive, indicating to the reader …\nReturns flags for formatting.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nFormats the value using the given formatter.\nTakes an <code>Arguments</code> struct and returns the resulting …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a type whose <code>fmt::Debug</code> and <code>fmt::Display</code> impls are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the key part of a new entry to the map output.\nAdds the key part of a new entry to the map output.\nTakes a string slice and emits it to the internal buffer …\nPerforms the correct padding for an integer which has …\nReturns the optionally specified precision for numeric …\nDetermines if the <code>0</code> flag was specified.\nDetermines if the <code>-</code> flag was specified.\nDetermines if the <code>+</code> flag was specified.\nAdds the value part of a new entry to the map output.\nAdds the value part of a new entry to the map output.\nReturns the optionally specified integer width that the …\nTakes an output stream and an <code>Arguments</code> struct that can be …\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nWrites some data to the underlying buffer contained within …\nCustom code within the asynchronous destructor.\nA future returned by the <code>async_drop_in_place</code>.\nA future returned by the <code>AsyncDrop::async_drop</code> to be part …\nA future represents an asynchronous computation obtained …\nConversion into a <code>Future</code>.\nWhich kind of future are we turning this into?\nThe type of value produced on completion.\nThe output that the future will produce on completion.\nCreates a future which never resolves, representing a …\nA Future that wraps a function returning <code>Poll</code>.\nA future that is immediately ready with a value.\nAsynchronously drops a value by running …\nConstructs the asynchronous destructor for this type.\nCreates the asynchronous destructor of the pointed-to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a future from a value.\nConsumes the <code>Ready</code>, returning the wrapped value.\nPolls multiple futures simultaneously, returning a tuple …\nCreates a future which never resolves, representing a …\nAttempts to resolve the future to a final value, …\nCreates a future that wraps a function returning <code>Poll</code>.\nCreates a future that is immediately ready with a value.\nA trait for creating instances of <code>Hasher</code>.\nUsed to create a default <code>BuildHasher</code> instance for types …\nA hashable type.\nDerive macro generating an impl of the trait <code>Hash</code>.\nA trait for hashing an arbitrary stream of bytes.\nType of the hasher that will be created.\nAn implementation of SipHash 2-4.\nCreates a new hasher.\nReturns the hash value for the values written so far.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFeeds this value into the given <code>Hasher</code>.\nCalculates the hash of a single value.\nFeeds a slice of this type into the given <code>Hasher</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new BuildHasherDefault for Hasher <code>H</code>.\nCreates a new <code>SipHasher</code> with the two initial keys set to 0.\nCreates a <code>SipHasher</code> that is keyed off the provided keys.\nWrites some data into this <code>Hasher</code>.\nWrites a single <code>i128</code> into this hasher.\nWrites a single <code>i16</code> into this hasher.\nWrites a single <code>i32</code> into this hasher.\nWrites a single <code>i64</code> into this hasher.\nWrites a single <code>i8</code> into this hasher.\nWrites a single <code>isize</code> into this hasher.\nWrites a length prefix into this hasher, as part of being …\nWrites a single <code>str</code> into this hasher.\nWrites a single <code>u128</code> into this hasher.\nWrites a single <code>u16</code> into this hasher.\nWrites a single <code>u32</code> into this hasher.\nWrites a single <code>u64</code> into this hasher.\nWrites a single <code>u8</code> into this hasher.\nWrites a single <code>usize</code> into this hasher.\nMakes a <em>soundness</em> promise to the compiler that <code>cond</code> holds.\nAn identity function that <em><strong>hints</strong></em> to the compiler to be …\nAn identity function that causes an <code>unused_must_use</code> …\nEmits a machine instruction to signal the processor that …\nInforms the compiler that the site which is calling this …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nAborts the execution of the process.\nPerforms checked integer addition.\nLowers in MIR to <code>Rvalue::Aggregate</code> with …\nCalculates the offset from a pointer, potentially wrapping.\nA guard for unsafe functions that cannot ever be executed …\nA guard for <code>std::mem::uninitialized</code>. This will statically …\nA guard for unsafe functions that cannot ever be executed …\nInforms the optimizer that a condition is always true. If …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nBitwise and with the current value, returning the previous …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nStores a value if the current value is the same as the <code>old</code> …\nAn atomic fence.\nAn atomic fence.\nAn atomic fence.\nAn atomic fence.\nLoads the current value of the pointer.\nLoads the current value of the pointer.\nLoads the current value of the pointer.\nDo NOT use this intrinsic; “unordered” operations do …\nMaximum with the current value using a signed comparison.\nMaximum with the current value using a signed comparison.\nMaximum with the current value.\nMaximum with the current value using a signed comparison.\nMaximum with the current value using a signed comparison.\nMinimum with the current value using a signed comparison.\nMinimum with the current value using a signed comparison.\nMinimum with the current value using a signed comparison.\nMinimum with the current value using a signed comparison.\nMinimum with the current value using a signed comparison.\nBitwise nand with the current value, returning the …\nBitwise nand with the current value, returning the …\nBitwise nand with the current value, returning the …\nBitwise nand with the current value, returning the …\nBitwise nand with the current value, returning the …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nBitwise or with the current value, returning the previous …\nA compiler-only memory barrier.\nA compiler-only memory barrier.\nA compiler-only memory barrier.\nA compiler-only memory barrier.\nStores the value at the specified memory location.\nStores the value at the specified memory location.\nStores the value at the specified memory location.\nDo NOT use this intrinsic; “unordered” operations do …\nMaximum with the current value using an unsigned …\nMaximum with the current value using an unsigned …\nMaximum with the current value using an unsigned …\nMaximum with the current value using an unsigned …\nMaximum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nMinimum with the current value using an unsigned …\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nStores the value at the specified memory location, …\nStores the value at the specified memory location, …\nStores the value at the specified memory location, …\nStores the value at the specified memory location, …\nStores the value at the specified memory location, …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nBitwise xor with the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nSubtract from the current value, returning the previous …\nReverses the bits in an integer type <code>T</code>.\nSee documentation of <code>std::hint::black_box</code> for details.\nExecutes a breakpoint trap, for inspection by a debugger.\nReverses the bytes in an integer type <code>T</code>.\nGets a reference to a static <code>Location</code> indicating where it …\nRust’s “try catch” construct for unwinding. Invokes …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nReturns the smallest integer greater than or equal to an …\nLexicographically compare <code>[left, left + bytes)</code> and …\nAllocates a block of memory at compile time. At runtime, …\nDeallocates a memory which allocated by …\nSelects which function to call depending on the context.\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies the sign from <code>y</code> to <code>x</code> for <code>f128</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f16</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.\nCopies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.\nReturns the cosine of an <code>f128</code>.\nReturns the cosine of an <code>f16</code>.\nReturns the cosine of an <code>f32</code>.\nReturns the cosine of an <code>f64</code>.\nReturns the number of leading unset bits (zeroes) in an …\nLike <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when given …\nReturns the number of bits set in an integer type <code>T</code>\nReturns the number of trailing unset bits (zeroes) in an …\nLike <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when given …\nReturns the value of the discriminant for the variant in …\nPerforms an exact division, resulting in undefined …\nReturns 2 raised to the power of an <code>f128</code>.\nReturns 2 raised to the power of an <code>f16</code>.\nReturns 2 raised to the power of an <code>f32</code>.\nReturns 2 raised to the power of an <code>f64</code>.\nReturns the exponential of an <code>f128</code>.\nReturns the exponential of an <code>f16</code>.\nReturns the exponential of an <code>f32</code>.\nReturns the exponential of an <code>f64</code>.\nReturns the absolute value of an <code>f128</code>.\nReturns the absolute value of an <code>f16</code>.\nReturns the absolute value of an <code>f32</code>.\nReturns the absolute value of an <code>f64</code>.\nFloat addition that allows optimizations based on …\nFloat addition that allows optimizations based on …\nFloat division that allows optimizations based on …\nFloat division that allows optimizations based on …\nConverts with LLVM’s fptoui/fptosi, which may return …\nReturns the largest integer less than or equal to an <code>f128</code>.\nReturns the largest integer less than or equal to an <code>f16</code>.\nReturns the largest integer less than or equal to an <code>f32</code>.\nReturns the largest integer less than or equal to an <code>f64</code>.\nReturns <code>a * b + c</code> for <code>f128</code> values.\nReturns <code>a * b + c</code> for <code>f16</code> values.\nReturns <code>a * b + c</code> for <code>f32</code> values.\nReturns <code>a * b + c</code> for <code>f64</code> values.\nFloat multiplication that allows optimizations based on …\nFloat multiplication that allows optimizations based on …\nReturns <code>a * b + c</code> for <code>f128</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f16</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f32</code> values, non-deterministically …\nReturns <code>a * b + c</code> for <code>f64</code> values, non-deterministically …\nMoves a value out of scope without running drop glue.\nFloat remainder that allows optimizations based on …\nFloat remainder that allows optimizations based on …\nFloat subtraction that allows optimizations based on …\nFloat subtraction that allows optimizations based on …\nReturns whether the argument’s value is statically known …\nHints to the compiler that branch condition is likely to …\nReturns the base 10 logarithm of an <code>f128</code>.\nReturns the base 10 logarithm of an <code>f16</code>.\nReturns the base 10 logarithm of an <code>f32</code>.\nReturns the base 10 logarithm of an <code>f64</code>.\nReturns the base 2 logarithm of an <code>f128</code>.\nReturns the base 2 logarithm of an <code>f16</code>.\nReturns the base 2 logarithm of an <code>f32</code>.\nReturns the base 2 logarithm of an <code>f64</code>.\nReturns the natural logarithm of an <code>f128</code>.\nReturns the natural logarithm of an <code>f16</code>.\nReturns the natural logarithm of an <code>f32</code>.\nReturns the natural logarithm of an <code>f64</code>.\nReturns the maximum of two <code>f128</code> values.\nReturns the maximum of two <code>f16</code> values.\nReturns the maximum of two <code>f32</code> values.\nReturns the maximum of two <code>f64</code> values.\nThe minimum alignment of a type.\nThe required alignment of the referenced value.\nReturns the minimum of two <code>f128</code> values.\nReturns the minimum of two <code>f16</code> values.\nReturns the minimum of two <code>f32</code> values.\nReturns the minimum of two <code>f64</code> values.\nRustc internal tooling for hand-writing MIR.\nPerforms checked integer multiplication\nReturns the nearest integer to an <code>f128</code>. Changing the …\nReturns the nearest integer to an <code>f16</code>. Changing the …\nReturns the nearest integer to an <code>f32</code>. Changing the …\nReturns the nearest integer to an <code>f64</code>. Changing the …\nReturns <code>true</code> if the actual type given as <code>T</code> requires drop …\nEmits a <code>nontemporal</code> store, which gives a hint to the CPU …\nCalculates the offset from a pointer.\nRaises an <code>f128</code> to an <code>f128</code> power.\nRaises an <code>f16</code> to an <code>f16</code> power.\nRaises an <code>f32</code> to an <code>f32</code> power.\nRaises an <code>f64</code> to an <code>f64</code> power.\nRaises an <code>f128</code> to an integer power.\nRaises an <code>f16</code> to an integer power.\nRaises an <code>f32</code> to an integer power.\nRaises an <code>f64</code> to an integer power.\nThe preferred alignment of a type.\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nThe <code>prefetch</code> intrinsic is a hint to the code generator to …\nSee documentation of <code>&lt;*const T&gt;::guaranteed_eq</code> for details.\nMasks out bits of the pointer according to a mask.\nLowers in MIR to <code>Rvalue::UnaryOp</code> with <code>UnOp::PtrMetadata</code>.\nSee documentation of <code>&lt;*const T&gt;::offset_from</code> for details.\nSee documentation of <code>&lt;*const T&gt;::sub_ptr</code> for details.\nDetermines whether the raw bytes of the two values are …\nThis is an implementation detail of <code>crate::ptr::read</code> and …\nReturns the nearest integer to an <code>f128</code>. Changing the …\nReturns the nearest integer to an <code>f16</code>. Changing the …\nReturns the nearest integer to an <code>f32</code>. Changing the …\nReturns the nearest integer to an <code>f64</code>. Changing the …\nPerforms rotate left.\nPerforms rotate right.\nReturns the nearest integer to an <code>f128</code>. Rounds half-way …\nReturns the nearest integer to an <code>f16</code>. Rounds half-way …\nReturns the nearest integer to an <code>f32</code>. Rounds half-way …\nReturns the nearest integer to an <code>f64</code>. Rounds half-way …\nReturns the nearest integer to an <code>f128</code>. Rounds half-way …\nReturns the nearest integer to an <code>f16</code>. Rounds half-way …\nReturns the nearest integer to an <code>f32</code>. Rounds half-way …\nReturns the nearest integer to an <code>f64</code>. Rounds half-way …\nMagic intrinsic that derives its meaning from attributes …\nComputes <code>a + b</code>, saturating at numeric bounds.\nComputes <code>a - b</code>, saturating at numeric bounds.\nReturns either <code>true_val</code> or <code>false_val</code> depending on …\nSIMD compiler intrinsics.\nReturns the sine of an <code>f128</code>.\nReturns the sine of an <code>f16</code>.\nReturns the sine of an <code>f32</code>.\nReturns the sine of an <code>f64</code>.\nThe size of a type in bytes.\nThe size of the referenced value in bytes.\nReturns the square root of an <code>f128</code>\nReturns the square root of an <code>f16</code>\nReturns the square root of an <code>f32</code>\nReturns the square root of an <code>f64</code>\nPerforms checked integer subtraction\nDoes a three-way comparison between the two integer …\nReinterprets the bits of a value of one type as another …\nLike <code>transmute</code>, but even less checked at compile-time: …\nReturns the integer part of an <code>f128</code>.\nReturns the integer part of an <code>f16</code>.\nReturns the integer part of an <code>f32</code>.\nReturns the integer part of an <code>f64</code>.\nGets an identifier which is globally unique to the …\nGets a static string slice containing the name of a type.\nNon-overlapping <em>typed</em> swap of a single value.\nReturns whether we should perform some UB-checking at …\nPerforms a volatile load from the <code>src</code> pointer The pointer …\nPerforms a volatile store to the <code>dst</code> pointer. The pointer …\nReturns the result of an unchecked addition, resulting in …\nPerforms an unchecked division, resulting in undefined …\nReturns the result of an unchecked multiplication, …\nReturns the remainder of an unchecked division, resulting …\nPerforms an unchecked left shift, resulting in undefined …\nPerforms an unchecked right shift, resulting in undefined …\nReturns the result of an unchecked subtraction, resulting …\nHints to the compiler that branch condition is likely to …\nInforms the optimizer that this point in the code is not …\nReturns the number of variants of the type <code>T</code> cast to a …\nEquivalent to the appropriate <code>llvm.memmove.p0i8.0i8.*</code> …\nEquivalent to the appropriate <code>llvm.memcpy.p0i8.0i8.*</code> …\nPerforms a volatile load from the <code>src</code> pointer.\nEquivalent to the appropriate <code>llvm.memset.p0i8.*</code> …\nPerforms a volatile store to the <code>dst</code> pointer.\nThe intrinsic will return the alignment stored in that …\nThe intrinsic will return the size stored in that vtable.\nReturns (a + b) mod 2N, where N is the width of T in bits.\nReturns (a * b) mod 2N, where N is the width of T in bits.\nReturns (a - b) mod 2N, where N is the width of T in bits.\nSets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…\nThis is an implementation detail of <code>crate::ptr::write</code> and …\nUnwinding is just not possible given the ABI of this …\nType representing basic blocks.\nCall a function.\nEmits a <code>CastKind::PtrToPtr</code> cast.\nEmits a <code>CastKind::Transmute</code> cast.\nA basic block that lies on an unwind path.\nGets the discriminant of a place.\nDrop the contents of a place.\nAccess the field with the given index of some place.\nWe were already cleaning up for an ongoing unwind, and a …\nA non-cleanup basic block.\nCall a function.\nAn unwind action that continues execution in a given basic …\nAn unwind action that continues unwinding.\nA terminator that resumes the unwinding.\nAn unwind action that terminates the execution.\nThe reason we are terminating the process during unwinding.\nAn unwind action that triggers undefined behavior.\nAdds a variant projection with the given index to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMacro for generating custom MIR.\nHelper macro that allows you to treat a value expression …\nAdds two simd vectors elementwise.\n“Ands” vectors elementwise.\nCalculates the offset from a pointer vector elementwise, …\nNumerically casts a vector, elementwise.\nTruncates an integer vector to a bitmask.\nReverses bits of each element.\nSwaps bytes of each element.\nNumerically casts a vector, elementwise.\nCasts a vector of pointers.\nRounds up each element to the next highest integer-valued …\nCounts the leading zeros of each element.\nCounts the number of ones in each element.\nCounts the trailing zeros of each element.\nDivides <code>lhs</code> by <code>rhs</code> elementwise.\nTests elementwise equality of two vectors.\nExposes a vector of pointers as a vector of addresses.\nExtracts an element from a vector.\nReturns absolute value of a vector, elementwise.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\n<code>T</code> must be a vector of floats.\nRounds down each element to the next lowest integer-valued …\nComputes <code>(x*y) + z</code> for each element, but without any …\nReturns the maximum of two vectors, elementwise.\nReturns the minimum of two vectors, elementwise.\n<code>T</code> must be a vector of floats.\nTakes the square root of each element.\nReads a vector of pointers.\nTests if <code>x</code> is greater than or equal to <code>y</code>, elementwise.\nTests if <code>x</code> is greater than <code>y</code>, elementwise.\nInserts an element into a vector, returning the updated …\nTests if <code>x</code> is less than or equal to <code>y</code>, elementwise.\nTests if <code>x</code> is less than <code>y</code>, elementwise.\nReads a vector of pointers.\nWrites to a vector of pointers.\nMultiplies two simd vectors elementwise.\nTests elementwise inequality equality of two vectors.\nNegates a vector elementwise.\n“Ors” vectors elementwise.\nAdds elements within a vector from left to right.\nAdds elements within a vector in arbitrary order. May also …\nChecks if all mask values are true.\nLogical “ands” all elements together.\nChecks if any mask value is true.\nReturns the maximum element of a vector.\nReturns the minimum element of a vector.\nMultiplies elements within a vector from left to right.\nMultiplies elements within a vector in arbitrary order. …\nLogical “ors” all elements together.\nLogical “exclusive ors” all elements together.\nReturns remainder of two vectors elementwise.\nRounds each element to the closest integer-valued float. …\nAdds two simd vectors elementwise, with saturation.\nSubtracts two simd vectors elementwise, with saturation.\nWrites to a vector of pointers.\nSelects elements from a mask.\nSelects elements from a bitmask.\nShifts vector left elementwise, with UB on overflow.\nShifts vector right elementwise, with UB on overflow.\nShuffles two vectors by const indices.\nSubtracts <code>rhs</code> from <code>lhs</code> elementwise.\nReturns the integer part of each element as an …\nCreates a vector of pointers from a vector of addresses.\n“Exclusive ors” vectors elementwise.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nThe operation failed because a pipe was closed.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nThis data structure is used as a workaround for current …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA parameter was incorrect.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nContains the success value\nAny I/O error not part of this list.\nThe operation lacked the necessary privileges to complete.\nThe <code>Read</code> trait allows for reading bytes from a source.\nThe I/O operation’s timeout expired, causing it to be …\nAn error returned when an operation could not be completed …\nThe operation needs to block to complete, but the blocking …\nAn error returned when an operation could not be completed …\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adaptor for this instance of …\nFlush this output stream, ensuring that all intermediately …\nReturns the argument unchanged.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this cursor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nConsumes this cursor, returning the underlying value.\nReturns the corresponding <code>ErrorKind</code> for this error.\nCreates a new I/O error from a known kind of error as well …\nCreates a new cursor wrapping the provided underlying …\nReturns the current position of this cursor.\nPull some bytes from this source into the specified …\nRead the exact number of bytes required to fill <code>buf</code>.\nSets the position of this cursor.\nWrite a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nAn iterator over <code>N</code> elements of the iterator at a time.\nLike <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …\nAn iterator that links two iterators together, in a chain.\nAn iterator that clones the elements of an underlying …\nAn iterator that copies the elements of an underlying …\nAn iterator that repeats endlessly.\nAn iterator able to yield elements from both ends.\nAn iterator that yields nothing.\nAn iterator that yields the current count and the element …\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nAn iterator that filters the elements of <code>iter</code> with …\nAn iterator that uses <code>f</code> to both filter and map elements …\nAn iterator that maps each element to an iterator, and …\nAn iterator that flattens one level of nesting in an …\nAn iterator where each iteration calls the provided …\nConversion from an <code>Iterator</code>.\nAn iterator that yields <code>None</code> forever after the underlying …\nAn iterator that always continues to yield <code>None</code> when …\nAn iterator that calls a function with a reference to each …\nAn iterator adapter that places a separator between all …\nAn iterator adapter that places a separator between all …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nAn iterator that maps the values of <code>iter</code> with <code>f</code>.\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator over the mapped windows of another iterator.\nAn iterator that yields an element exactly once.\nAn iterator that yields a single element of type <code>A</code> by …\nAn iterator with a <code>peek()</code> that returns an optional …\nTrait to represent types that can be created by …\nAn iterator that repeats an element endlessly.\nAn iterator that repeats an element an exact number of …\nAn iterator that repeats elements of type <code>A</code> endlessly by …\nA double-ended iterator with the direction inverted.\nAn iterator to maintain state while iterating another …\nAn iterator that skips over <code>n</code> elements of <code>iter</code>.\nAn iterator that rejects elements while <code>predicate</code> returns …\nObjects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn iterator for stepping iterators by a custom amount.\nA new iterator where each successive item is computed …\nTrait to represent types that can be created by summing up …\nAn iterator that only iterates over the first <code>n</code> iterations …\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator that reports an accurate length using …\nA type that upholds all invariants of <code>Step</code>.\nAn iterator that iterates two other iterators …\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nTests if every element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nBorrows an iterator, rather than consuming it.\nConverts the arguments to iterators and links them …\nTakes two iterators and creates a new iterator over both …\nCreates an iterator which <code>clone</code>s all of its elements.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCreates an iterator which copies all of its elements.\nConsumes the iterator, counting the number of iterations …\nRepeats an iterator endlessly.\nCreates a <code>Flatten</code> iterator from the default value of <code>I</code>.\nCreates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.\nCreates a <code>Cloned</code> iterator from the default value of <code>I</code>\nCreates a <code>Copied</code> iterator from the default value of <code>I</code>\nCreates an <code>Enumerate</code> iterator from the default value of <code>I</code>\nCreates a <code>Fuse</code> iterator from the default value of <code>I</code>.\nCreates a <code>Rev</code> iterator from the default value of <code>I</code>\nCreates an iterator that yields nothing.\nCreates an iterator which gives the current iteration …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nExtends a collection with the contents of an iterator.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new iterator where each iteration calls the …\nCreates a new iterator where each iteration calls the …\nCreates a value from an iterator.\nCreates an iterator which ends after the first <code>None</code>.\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDoes something with each element of an iterator, passing …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator from a value.\nReturns an iterator over the remaining elements of the …\nReturns <code>true</code> if the iterator is empty.\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nConsumes the iterator, returning the last element.\nDetermines if the elements of this <code>Iterator</code> are …\nReturns the exact remaining length of the iterator.\nDetermines if the elements of this <code>Iterator</code> are …\nTakes a closure and creates an iterator which calls that …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nAdvances the iterator and returns the next value.\nOverflow Behavior\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nConsume and return the next value of this iterator if a …\nConsume and return the next item if it is equal to <code>expected</code>…\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nCreates an iterator that yields an element exactly once.\nCreates an iterator that lazily generates a value exactly …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nReturns a reference to the next() value without advancing …\nReturns a mutable reference to the next() value without …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nSearches for an element in an iterator, returning its …\nTakes an iterator and generates <code>Self</code> from the elements by …\nIterates over the entire iterator, multiplying all the …\nReduces the elements to a single one, by repeatedly …\nCreates a new iterator that endlessly repeats a single …\nCreates a new iterator that repeats a single element a …\nCreates a new iterator that repeats elements of type <code>A</code> …\nReverses an iterator’s direction.\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator starting at the same point, but …\nReturns the number of <em>successor</em> steps required to get from …\nCreates a new iterator where each successive item is …\nTakes an iterator and generates <code>Self</code> from the elements by …\nSums the elements of an iterator.\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields elements based on a …\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nReduces the elements to a single one by repeatedly …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nConverts an iterator of pairs into a pair of containers.\nConverts the arguments to iterators and zips them.\n‘Zips up’ two iterators into a single iterator of …\nThe type of the element being streamed.\nThe type of the iterator being generated.\nThe trait <code>Iterable</code> represents a streamable object that can …\nStream that goes over an <code>[ExactSizeIterator]</code> in reverse …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the stream is empty, else <code>false</code>.\nReturn the iterator associated to the current instance.\nReturn a hint on the length of the stream.\nDerive macro generating impls of traits related to smart …\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nA marker for types which can be used as types of <code>const</code> …\nTypes whose values can be duplicated simply by copying …\nDerive macro generating an impl of the trait <code>Copy</code>.\nA marker for types that can be dropped.\nThe type of the discriminant, which must satisfy the trait …\nCompiler-internal trait used to indicate the type of enum …\nA common trait implemented by all function pointers.\nUsed to determine whether a type contains any <code>UnsafeCell</code> …\nZero-sized type used to mark things that “act like” …\nA marker type which does not implement <code>Unpin</code>.\nA marker for pointer-like types.\nTypes that can be transferred across thread boundaries.\nTypes with a constant size known at compile time.\nRequired trait for constants used in pattern matches.\nTypes for which it is safe to share references between …\nA marker for tuple types.\nTypes that do not require any pinning guarantees.\nTypes that can be “unsized” to a dynamically-sized …\nA marker for types which can be used as types of <code>const</code> …\nDerive macro generating an impl of the trait <code>ConstParamTy</code>.\nReturns the address of the function pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nConfigurable proof assumptions of <code>TransmuteFrom</code>.\nOpaque type representing the discriminant of an enum.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nA wrapper to inhibit the compiler from automatically …\nA wrapper type to construct uninitialized instances of <code>T</code>.\nWith this, <code>TransmuteFrom</code> does not assume you have ensured …\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nMarks that <code>Src</code> is transmutable into <code>Self</code>.\nWith this, <code>TransmuteFrom</code> assumes only that you have …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns the ABI-required minimum alignment of the type of …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nCombine the assumptions of <code>self</code> and <code>other_assumptions</code>.\nExtracts the values from an array of <code>MaybeUninit</code> …\nReturns the contents of this <code>MaybeUninit</code> as a slice of …\nReturns the contents of this <code>MaybeUninit</code> as a mutable …\nGets a mutable pointer to the contained value. Reading …\nGets a pointer to the contained value. Reading from this …\nExtracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …\nDrops the contained value in place.\nGets a mutable (unique) reference to the contained value.\nReads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …\nGets a shared reference to the contained value.\nRemove <code>other_assumptions</code> the obligations of <code>self</code>; e.g.:\nClones the elements from <code>src</code> to <code>this</code>, returning a mutable …\nBitwise-copies a value.\nCopies the elements from <code>src</code> to <code>this</code>, returning a mutable …\nReturns a value uniquely identifying the enum variant in <code>v</code>.\nDisposes of a value.\nManually drops the contained value.\nFills <code>this</code> with elements by cloning <code>value</code>, returning a …\nFills <code>this</code> with elements yielded by an iterator until …\nFills <code>this</code> with elements returned by calling a closure …\nTakes ownership and “forgets” about the value <strong>without </strong>…\nLike <code>forget</code>, but also accepts unsized values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the value from the <code>ManuallyDrop</code> container.\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the ABI-required minimum alignment of a type in …\nReturns the ABI-required minimum alignment of the type of …\nReturns <code>true</code> if dropping values of type <code>T</code> matters.\nWrap a value to be manually dropped.\nCreates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …\nExpands to the offset in bytes of a field from the …\nMoves <code>src</code> into the referenced <code>dest</code>, returning the previous …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nReturns the size of the pointed-to value in bytes.\nReturns the contents of this slice of <code>MaybeUninit</code> as a …\nReturns the contents of this mutable slice of <code>MaybeUninit</code> …\nGets a mutable pointer to the first element of the array.\nGets a pointer to the first element of the array.\nAssuming all the elements are initialized, get a mutable …\nAssuming all the elements are initialized, get a slice to …\nSwaps the values at two mutable locations, without …\nReplaces <code>dest</code> with the default value of <code>T</code>, returning the …\nTakes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.\nReinterprets the bits of a value of one type as another …\nTransmutes a <code>Src</code> value into a <code>Self</code>.\nInterprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …\nTransposes a <code>MaybeUninit&lt;[T; N]&gt;</code> into a <code>[MaybeUninit&lt;T&gt;; N]</code>…\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.\nCreates a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …\nBypasses Rust’s normal memory-initialization checks by …\nWhen <code>false</code>, <code>TransmuteFrom</code> is not implemented for …\nReturns the number of variants in the enum type <code>T</code>.\nSets the value of the <code>MaybeUninit&lt;T&gt;</code>.\nReturns the value of type <code>T</code> represented by the all-zero …\nCreates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …\nAn error which can be returned when parsing an IP address …\nAdmin-Local scope.\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\nAn IPv4 address representing the broadcast address: …\nGlobal scope.\nInterface-Local scope.\nAn IP address, either IPv4 or IPv6.\nAn IPv4 address.\nAn IPv6 address.\nScope of an IPv6 multicast address as defined in IETF RFC …\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\nLink-Local scope.\nOrganization-Local scope.\nRealm-Local scope.\nSite-Local scope.\nAn internet socket address, either IPv4 or IPv6.\nAn IPv4 socket address.\nAn IPv6 socket address.\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>.\nAn IPv4 address.\nAn IPv4 socket address.\nAn IPv6 address.\nAn IPv6 socket address.\nReturns the flow information associated with this address.\nCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.\nCreates an <code>IpAddr::V4</code> from a four element byte array.\nReturns the argument unchanged.\nCreates an <code>IpAddr::V6</code> from a sixteen element byte array.\nCopies this address to a new <code>IpAddr::V6</code>.\nCopies this address to a new <code>IpAddr::V4</code>.\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nReturns the argument unchanged.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nReturns the argument unchanged.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …\nConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.\nReturns the argument unchanged.\nConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address.\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address.\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nReturns <code>true</code> for the special ‘unspecified’ address.\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nReturns the address’s multicast scope if the address is …\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nCreates a new socket address from an IP address and a port …\nCreates a new socket address from an <code>IPv4</code> address and a …\nCreates a new socket address from an <code>IPv6</code> address, a …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nParse an IP address from a slice of bytes.\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nParse a socket address from a slice of bytes.\nParse an IPv4 socket address from a slice of bytes.\nParse an IPv6 socket address from a slice of bytes.\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the scope ID associated with this address.\nReturns the eight 16-bit segments that make up this …\nChanges the flow information associated with this socket …\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the scope ID associated with this socket address.\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nThe size of this non-zero integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nReturns the size of this integer type in bits.\nValue being parsed is empty.\nA classification of floating point numbers.\nPositive or negative infinity, which often results from …\nEnum to store the various types of errors that can cause …\nContains an invalid digit in its context.\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nThe largest value that can be represented by this non-zero …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nReturns the largest value that can be represented by this …\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nThe smallest value that can be represented by this non-zero\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nReturns the smallest value that can be represented by this …\nNaN (not a number): this value results from calculations …\nInteger is too small to store in target integer type.\nA value that is known not to equal zero.\nAn <code>i128</code> that is known not to equal zero.\nAn <code>i16</code> that is known not to equal zero.\nAn <code>i32</code> that is known not to equal zero.\nAn <code>i64</code> that is known not to equal zero.\nAn <code>i8</code> that is known not to equal zero.\nAn <code>isize</code> that is known not to equal zero.\nA <code>u128</code> that is known not to equal zero.\nA <code>u16</code> that is known not to equal zero.\nA <code>u32</code> that is known not to equal zero.\nA <code>u64</code> that is known not to equal zero.\nA <code>u8</code> that is known not to equal zero.\nA <code>usize</code> that is known not to equal zero.\nA regular floating point number, not any of the …\nAn error which can be returned when parsing a float.\nAn error which can be returned when parsing an integer.\nInteger is too large to store in target integer type.\nProvides intentionally-saturating arithmetic on <code>T</code>.\n“Subnormal” or “denormal” floating point …\nThe error type returned when a checked integral type …\nProvides intentionally-wrapped arithmetic on <code>T</code>.\nValue was Zero\nPositive or negative zero.\nA marker trait for primitive types which can be zero.\nComputes the absolute value of self. See <code>i16::abs</code> for …\nComputes the absolute value of self. See <code>i128::abs</code> for …\nComputes the absolute value of self. See <code>isize::abs</code> for …\nComputes the absolute value of self. See <code>i8::abs</code> for …\nComputes the absolute value of self. See <code>i64::abs</code> for …\nComputes the absolute value of self. See <code>i32::abs</code> for …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nComputes the absolute value of <code>self</code>, wrapping around at …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nChecked absolute value. Checks for overflow and returns …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nAdds an unsigned integer to a non-zero value. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nMultiplies two non-zero integers together. Checks for …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nChecked negation. Computes <code>-self</code>, returning <code>None</code> if …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nReturns the smallest power of two greater than or equal to …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nRaises non-zero value to an integer power. Checks for …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …\nCalculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …")