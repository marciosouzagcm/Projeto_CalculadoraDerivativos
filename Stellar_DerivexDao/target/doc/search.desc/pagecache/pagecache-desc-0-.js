searchState.loadedDescShard("pagecache", 0, "<code>pagecache</code> is a lock-free pagecache and log for building …\nPersisted immutable update\nAn atomic pointer that can be safely shared between …\nPerforms exponential backoff in spin loops.\nPoints to a value stored off-log in the blob directory.\nA pointer to an blob blob.\nPads and aligns a value to the length of a cache line.\nA compare and swap result.  If the CAS is successful, the …\nThe underlying collection no longer exists.\nAn epoch-based garbage collector.\nThe error returned on failed compare-and-set operation.\nA finalized <code>ConfigBuilder</code> that can be use multiple times …\nTop-level configuration for the system.\nUnexpected corruption\nCorruption has been detected in the storage file.\nA pointer to a location on disk or an off-log blob.\nContains the error value\nContains the error value\nAn Error type encapsulating various issues that may come up\nA fast map that is not resistant to collision attacks. …\nA fast map that is not resistant to collision attacks. …\nA fast map that is not resistant to collision attacks. …\nA fast set that is not resistant to collision attacks. …\nA fast set that is not resistant to collision attacks. …\nA fast set that is not resistant to collision attacks. …\nFreeing of a page\nKeep track of segment utilization, and reuse segments when …\nA guard that keeps the current thread pinned.\nA histogram collector that uses zero-configuration …\nPoints to a value stored in the single-file log.\nA read or write error has happened when interacting with …\nA lazily initialized value\nWrite to the end of the log, always.\nA handle to a garbage collector.\nA log file offset.\nThe high-level types of stored information about pages and …\nA simple LRU cache.\nA logical sequence number.\nA metric collector for all pagecache users running in this …\nA user of a <code>PageCache</code> needs to provide a <code>Materializer</code> which\nA simple map that can be used to store metadata for the …\nA node in the lock-free <code>Stack</code>.\nContains the success value\nContains the success value\nA Future value which may or may not be filled\nThe completer side of the Future\nAn owned heap-allocated object.\nA lock-free pagecache which supports fragmented pages for …\nA page identifier.\nA pointer to shared lock-free state bound by a pinned epoch…\nA simple lock-free radix tree.\nEnsures that any operations that are written to disk …\nPersisted data containing a page replacement\nAn unexpected bug has happened. Please open an issue on …\nA pending log reservation which can be aborted or …\nThe top-level result type for dealing with the <code>PageCache</code>.\nAn offset for a storage file segment.\nThe log may be configured to write data in several …\nA pointer to an object protected by the epoch GC.\nSome state indicating this should be skipped\nA simple lock-free stack, with the ability to atomically …\nAn iterator over nodes in a lock-free stack.\nThe system has been used in an unsupported way.\nA set built on top of <code>Vec</code> and binary search, for use when …\nCancel the reservation, placing a failed flush on disk, …\nCalled when an item is accessed. Returns a Vec of items to …\nCreate a new page, trying to reuse old freed pages if …\nConverts the pointer to a raw pointer (without the tag).\nConverts the pointer to a reference.\nAttempt to opportunistically rewrite data from a Draining …\nFinalize the configuration.\nmaximum size for the system page cache\ncompare and push\ncompare and push\nCompare and swap an old value to a new one.\ncompare and swap\nCompare-and-swap the <code>Meta</code> mapping for a given identifier.\nClears the underlying buffer\nReturns a copy of the atomic value.\nCreates another reference to the same garbage collector.\nReturns the <code>Collector</code> associated with this handle.\nReturns the <code>Collector</code> associated with this guard.\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nComplete the reservation, placing the buffer on disk. …\nthe compression factor to use with zstd compression\nReturns <code>true</code> if the item is present\nReturn the count of observations in this histogram.\nThe value in the atomic pointer at the time of the failed …\nDebug helps test concurrent issues with random jitter and …\nStores a function so that it can be executed at some point …\nStores a destructor for an object so that it can be …\nStores a function so that it can be executed at some point …\nDelete a value from the tree, returning the old value if …\nRemove the page mapping for a given identifier\nDereferences the pointer.\nDereferences the pointer.\nChecks if both handles point to the same collector.\nBitwise “and” with the current tag.\nBitwise “or” with the current tag.\nBitwise “xor” with the current tag.\nComplete the OneShot\nClears up the thread-local cache of deferred functions by …\nFlushes any pending IO buffers to disk to ensure …\nnumber of ms between IO buffer flushes\nFree a particular page.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new atomic pointer pointing to <code>owned</code>.\nReturns a new atomic pointer pointing to <code>ptr</code>.\nReturns a new atomic pointer pointing to <code>raw</code>.\nReturns a new owned pointer pointing to <code>b</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new pointer pointing to <code>raw</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a StackIter from a pointer to one.\nReturns a new owned pointer pointing to <code>raw</code>.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nGenerate a monotonic ID. Not guaranteed to be contiguous. …\nTry to get a value from the tree.\nTry to retrieve a page by its logical ID.\nIndexes into the underlying buffer\nRetrieve the PageId associated with an identifier\nReturn the global error if one was encountered during an …\nReturns the current head pointer of the stack, which can …\ngenerated IDs are persisted at this interval. during …\nInsert a new item\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the owned pointer into a <code>Box</code>.\nReturns the inner value.\nTakes ownership of the pointee.\nTakes ownership of the pointee.\nConverts the owned pointer into a <code>Shared</code>.\nsize of each io flush buffer. MUST be multiple of 512!\nReturns <code>true</code> if exponential backoff has completed and …\nReturns <code>true</code> if the set is empty\nReturns <code>true</code> if the pointer is null.\nReturns <code>true</code> if the handle is pinned.\nIterate over the contents of this set\nThe last Lsn number for the head of this page\nReturns the size of the set\nGet the log file offset for reading this buffer in the …\nTry to atomically add a <code>PageFrag</code> to the page. Returns …\nLoads a <code>Shared</code> from the atomic pointer.\nLoads a <code>Shared</code> from the atomic pointer using a “consume…\nWorking with <code>Log</code>\nReturns the LSN representing the beginning of this batch.\nGet the log sequence number for this update.\nBlocks until the provided Lsn is stable on disk, …\nRecord a value.\nUsed to merge chains of partial pages into a form that is …\nReturns the current <code>Meta</code> map, which contains a convenient …\nLook up a PageId for a given identifier in the <code>Meta</code> …\nAllocates <code>value</code> on the heap and returns a new atomic …\nAllocates <code>value</code> on the heap and returns a new owned …\nCreates a new <code>Backoff</code>.\nInstantiates a new <code>Lru</code> cache.\nPads and aligns a value to the length of a cache line.\nCreates a new collector.\nCreate a new Lazy\nReturns a default <code>ConfigBuilder</code>\nThe new value, which the operation failed to store.\nTurns a vector of elements into a lock-free stack of them, …\nReturns a new null atomic pointer.\nReturns a new null pointer.\npage consolidation threshold\nCreate a new OneShotFiller and the OneShot that will be …\nSet the path of the database (builder).\nPeeks the first element\nRetrieve a percentile [0-100]. Returns NAN if no metrics …\nPins the current thread.\nPins the handle.\nInitiate an atomic sequence of writes to the underlying …\nDump out some common percentiles.\nprint a performance profile when the Config is dropped\nGet the underlying storage location for the written value. …\nAdd an item to the stack, spinning until successful.\nwhether to run in read-only mode\nRegisters a new handle for the collector.\nRemoves an item by value\nUnpins and then immediately re-pins the thread.\nTemporarily unpins the thread, executes the given function …\nReplace an existing page with a different set of <code>PageFrag</code>s.\nReturns the length of the on-log reservation.\nResets the <code>Backoff</code>.\nWrites the last LSN for a batch into an earlier …\nthe cleanup threshold skew in percentage points between …\nthe proportion of remaining valid pages in the segment …\nthe file segment selection mode\nSet the PageId associated with an identifier\nnumber of operations between page table snapshots\nsnapshot file location\nBacks off in a blocking loop.\nBacks off in a lock-free loop.\nThe highest known stable Lsn on disk.\nInstantiate a new <code>PageCache</code>.\nStores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.\nReturn the sum of all observations in this histogram.\nStores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …\nAtomically swap the previous value in a tree with a new …\nReturns the tag stored within the pointer.\nReturns the tag stored within the pointer.\ndeletes the database after drop. if no path is set, uses …\nReturn the current rooted tenants in Meta\nA simple adaptive threadpool that returns a oneshot future.\nReturns a reference to a dummy guard that allows …\nBlock on the OneShot’s completion or dropping of the …\nwhether to use zstd compression\nBlock on the OneShot’s completion or dropping of the …\nReturns <code>true</code> if the database was recovered from a previous …\nReturns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …\nReturns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …\nThe file location that corrupted data was found at.\nThis function is useful for inducing random jitter into …\nA sequential store which allows users to create …\nAll log messages are prepended with this header\nFlushes any pending IO buffers to disk to ensure …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over the log, starting with a specified …\nblocks until the specified log sequence number has been …\nread a buffer from the disk\nTries to claim a reservation for writing a buffer to a …\nreturns the current stable offset written to disk\nStart the log, open or create the configured file, and …\nStarts a log for use without a materializer.\nSpawn a function on the threadpool.")