searchState.loadedDescShard("aead", 0, "Authenticated Encryption with Associated Data (AEAD) traits\nAuthenticated Encryption with Associated Data (AEAD) …\nIn-place stateless AEAD trait.\nStateful Authenticated Encryption with Associated Data …\nIn-place stateful AEAD trait.\nIn-place encryption/decryption byte buffers.\nThe upper bound amount of additional space required to …\nThe upper bound amount of additional space required to …\nThe upper bound amount of additional space required to …\nThe upper bound amount of additional space required to …\nError type.\nKey for a <code>NewAead</code> algorithm\nThe size of the key array required by this algorithm.\nInstantiate either a stateless <code>Aead</code> or stateful <code>AeadMut</code> …\nNonce: single-use value for ensuring ciphertexts are unique\nThe length of a nonce.\nThe length of a nonce.\nThe length of a nonce.\nThe length of a nonce.\nAEAD payloads are a combination of a message (plaintext or …\nTag: authentication code which ensures ciphertexts are …\nThe maximum length of the nonce.\nThe maximum length of the nonce.\nThe maximum length of the nonce.\nThe maximum length of the nonce.\nOptional “additional associated data” to authenticate …\nType aliases for many constants.\nDecrypt the given ciphertext slice, and return the …\nDecrypt the given ciphertext slice, and return the …\nDecrypt the message in-place, returning an error in the …\nDecrypt the message in-place, returning an error in the …\nDecrypt the message in-place, returning an error in the …\nDecrypt the data in-place, returning an error in the event …\nEncrypt the given plaintext payload, and return the …\nEncrypt the given plaintext slice, and return the …\nEncrypt the given buffer containing a plaintext message …\nEncrypt the given buffer containing a plaintext message …\nEncrypt the data in-place, returning the authentication tag\nEncrypt the data in-place, returning the authentication tag\nExtend this buffer from the given slice\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the buffer empty?\nGet the length of the buffer\nMessage to be encrypted/decrypted\nCreate a new AEAD instance with the given key.\nCreate new AEAD instance from key with variable size.\nTruncate this buffer to the given size\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing the integer 0.")