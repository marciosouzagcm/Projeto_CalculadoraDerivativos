searchState.loadedDescShard("cipher", 0, "This crate defines a set of traits which describe the …\nTraits used to define functionality of block ciphers.\nType aliases for many constants.\nTraits which define functionality of stream ciphers.\nBlock on which a <code>BlockCipher</code> operates.\nThe trait which defines in-place encryption and decryption …\nStateful block cipher which permits <code>&amp;mut self</code> access.\nSize of the block in bytes\nSize of the block in bytes\nError struct which used with <code>NewVarKey</code>\nKey for an algorithm that implements <code>NewBlockCipher</code>.\nKey size in bytes with which cipher guaranteed to be …\nInstantiate a <code>BlockCipher</code> algorithm.\nBlocks being acted over in parallel.\nNumber of blocks which can be processed in parallel by …\nType aliases for many constants.\nDecrypt block in-place\nDecrypt block in-place\nDecrypt several blocks in parallel using instruction level …\nDecrypt a slice of blocks, leveraging parallelism when …\nEncrypt block in-place\nEncrypt block in-place\nEncrypt several blocks in parallel using instruction level …\nEncrypt a slice of blocks, leveraging parallelism when …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new block cipher instance from key with fixed size.\nCreate new block cipher instance from key with variable …\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing the integer 0.\nBlock cipher\nBlock cipher\nTrait for initializing a stream cipher from a block cipher\nTrait for initializing a stream cipher from a mutable …\nThe error type returned when key and/or nonce used in …\nKey for an algorithm that implements <code>NewStreamCipher</code>.\nKey size in bytes\nThe error type returned when stream cipher has reached the …\nStream cipher creation trait.\nNonce for an algorithm that implements <code>NewStreamCipher</code>.\nNonce size in bytes\nNonce size in bytes\nNonce size in bytes\nThe error type returned when a cipher position can not be …\nTrait implemented for numeric types which can be used with …\nStream cipher core trait which covers both synchronous and …\nSynchronous stream cipher core trait.\nTrait for seekable stream ciphers.\nApply keystream to the data.\nType aliases for many constants.\nGet current keystream position\nDecrypt data in place.\nEncrypt data in place.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to get position for block number <code>block</code>, byte position …\nInstantiate a stream cipher from a block cipher\nInstantiate a stream cipher from a block cipher\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new stream cipher instance from variable length key …\nCreate new stream cipher instance from variable length key …\nSeek to the given position\nTry to get block number and bytes position for given block …\nApply keystream to the data, but return an error if end of …\nTry to get current keystream position\nTry to seek to the given position\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.")