searchState.loadedDescShard("rustix", 0, "<code>rustix</code> provides efficient memory-safe and I/O-safe …\nExport the <code>*Fd</code> types and traits that are used in rustix’…\nUtilities related to FFI bindings.\nI/O operations.\nUnsafe <code>ioctl</code> API.\nNetwork-related operations.\nA version of <code>AsFd</code> for use with Winsock API.\nA version of <code>AsRawFd</code> for use with Winsock API.\nExtracts raw sockets.\nA trait to borrow the socket from an underlying object.\nA borrowed socket.\nA version of <code>FromRawFd</code> for use with Winsock API.\nCreates I/O objects from raw sockets.\nA version of <code>IntoRawFd</code> for use with Winsock API.\nA trait to express the ability to consume an object and …\nAn owned socket.\nRaw SOCKETs.\nAn <code>as_fd</code> function for Winsock, where an <code>Fd</code> is a <code>Socket</code>.\nA version of <code>as_raw_fd</code> for use with Winsock API.\nExtracts the raw socket.\nBorrows the socket.\nReturns a <code>BorrowedSocket</code> holding the given raw socket.\nReturns the argument unchanged.\nTakes ownership of a <code>UdpSocket</code>’s underlying socket.\nTakes ownership of a <code>TcpListener</code>’s socket.\nTakes ownership of a <code>TcpStream</code>’s socket.\nReturns the argument unchanged.\nA version of <code>from_raw_fd</code> for use with Winsock API.\nConstructs a new I/O object from the specified raw socket.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA version of <code>into_raw_fd</code> for use with Winsock API.\nConsumes this object, returning the raw underlying socket.\nCreates a new <code>OwnedSocket</code> instance that shares the same …\nCreates a new <code>OwnedSocket</code> instance that shares the same …\nEquivalent to C’s <code>char</code> type.\nEquivalent to C’s <code>signed int</code> (<code>int</code>) type.\nEquivalent to C’s <code>signed long</code> (<code>long</code>) type.\nEquivalent to C’s <code>signed short</code> (<code>short</code>) type.\nEquivalent to C’s <code>unsigned int</code> type.\nEquivalent to C’s <code>unsigned long</code> type.\nEquivalent to C’s <code>unsigned short</code> type.\n<code>EACCES</code>\n<code>EADDRINUSE</code>\n<code>EADDRNOTAVAIL</code>\n<code>EAFNOSUPPORT</code>\n<code>EAGAIN</code>\n<code>EALREADY</code>\n<code>EBADF</code>\n<code>ECANCELED</code>\n<code>ECONNABORTED</code>\n<code>ECONNREFUSED</code>\n<code>ECONNRESET</code>\n<code>EDESTADDRREQ</code>\n<code>EDISCON</code>\n<code>EDQUOT</code>\nContains the error value\n<code>errno</code>—An error code.\n<code>EFAULT</code>\n<code>EHOSTDOWN</code>\n<code>EHOSTUNREACH</code>\n<code>EINPROGRESS</code>\n<code>EINTR</code>\n<code>EINVAL</code>\n<code>EINVALIDPROCTABLE</code>\n<code>EINVALIDPROVIDER</code>\n<code>EISCONN</code>\n<code>ELOOP</code>\n<code>EMFILE</code>\n<code>EMSGSIZE</code>\n<code>ENAMETOOLONG</code>\n<code>ENETDOWN</code>\n<code>ENETRESET</code>\n<code>ENETUNREACH</code>\n<code>ENOBUFS</code>\n<code>ENOMORE</code>\n<code>ENOPROTOOPT</code>\n<code>ENOTCONN</code>\n<code>ENOTEMPTY</code>\n<code>ENOTSOCK</code>\n<code>EOPNOTSUPP</code>\nContains the success value\n<code>EPFNOSUPPORT</code>\n<code>EPROTONOSUPPORT</code>\n<code>EPROTOTYPE</code>\n<code>EPROVIDERFAILEDINIT</code>\n<code>EREFUSED</code>\n<code>EREMOTE</code>\nA specialized <code>Result</code> type for <code>rustix</code> APIs.\n<code>ESHUTDOWN</code>\n<code>ESOCKTNOSUPPORT</code>\n<code>ESTALE</code>\n<code>ETIMEDOUT</code>\n<code>ETOOMANYREFS</code>\n<code>EUSERS</code>\n<code>EWOULDBLOCK</code>\n<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.\nReturns the argument unchanged.\nExtract an <code>Errno</code> value from a <code>std::io::Error</code>.\nConstruct an <code>Errno</code> from a raw OS error number.\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …\n<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …\nShorthand for <code>std::io::Error::from(self).kind()</code>.\nExtract the raw OS error number from this error.\nCall <code>f</code> until it either succeeds or fails other than …\nProvides a bad opcode at compile time.\nTrait for something that provides an <code>ioctl</code> opcode at …\nThe direction that an <code>ioctl</code> is going.\nImplements the traditional “getter” pattern for <code>ioctl</code>s.\nDoes the <code>ioctl</code> mutate any data in the userspace?\nImplements an <code>ioctl</code> that passes an integer into the <code>ioctl</code>.\nA trait defining the properties of an <code>ioctl</code> command.\nThe type used by the <code>ioctl</code> to signify the output.\nImplements an <code>ioctl</code> with no real arguments.\nNone of the above.\nThe opcode.\nThe opcode used by this <code>ioctl</code> command.\nThe opcode used by an <code>Ioctl</code>.\nThe type of the output data.\nThe type used by the <code>ioctl</code> to signify the command.\nRead data from the kernel.\nRead and write data to the kernel.\nImplements the pattern for <code>ioctl</code>s where a pointer argument …\nImplements an “updater” pattern for <code>ioctl</code>s.\nWrite data to the kernel.\nGet a pointer to the data to be passed to the <code>ioctl</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform an <code>ioctl</code> call.\nCreate a new no-argument <code>ioctl</code> object.\nCreate a new getter-style <code>ioctl</code> object.\nCreate a new pointer setter-style <code>ioctl</code> object.\nCreate a new pointer updater-style <code>ioctl</code> object.\nCreate a new integer <code>Ioctl</code> helper.\nCreate a new old <code>Opcode</code> from a raw opcode.\nCast the output data to the correct type.\nGet the raw opcode.\n<code>AF_APPLETALK</code>\n<code>AF_*</code> constants for use with <code>socket</code>, <code>socket_with</code>, and …\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\nAn IPv4 address representing the broadcast address: …\n<code>AF_DECnet</code>\n<code>SOCK_DGRAM</code>\n<code>MSG_DONTROUTE</code>\n<code>AF_INET</code>\n<code>AF_INET6</code>\n<code>AF_IPX</code>\n<code>AF_IRDA</code>\nAn IP address, either IPv4 or IPv6.\nAn IPv4 address.\nAn IPv6 address.\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\n<code>MSG_OOB</code>\n<code>MSG_OOB</code>\n<code>MSG_PEEK</code>\n<code>IPPROTO_*</code> and other constants for use with <code>socket</code>, …\n<code>SOCK_RAW</code>\n<code>SOCK_RDM</code>\nA type for holding raw integer address families.\nA type for holding raw integer protocols.\nA type for holding raw integer socket types.\n<code>SHUT_RD</code>—Disable further read operations.\n<code>SHUT_RDWR</code>—Disable further read and write operations.\n<code>MSG_*</code> flags for use with <code>recv</code>, <code>recvfrom</code>, and related …\n<code>SOCK_SEQPACKET</code>\n<code>AF_SNA</code>\n<code>SOCK_STREAM</code>\n<code>MSG_*</code> flags for use with <code>send</code>, <code>sendto</code>, and related …\n<code>SHUT_*</code> constants for use with <code>shutdown</code>.\nAn internet socket address, either IPv4 or IPv6.\n<code>struct sockaddr_storage</code> as a Rust enum.\n<code>struct sockaddr_storage</code> as a raw struct.\nAn IPv4 socket address.\nAn IPv6 socket address.\n<code>SOCK_*</code> constants for use with <code>socket_with</code>, <code>accept_with</code> and …\n<code>SOCK_*</code> constants for use with <code>socket</code>.\n<code>MSG_TRUNC</code>\n<code>AF_UNIX</code>, aka <code>AF_LOCAL</code>\n<code>AF_UNSPEC</code>\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>.\n<code>struct sockaddr_in</code>\nAn IPv4 address.\nAn IPv4 socket address.\n<code>struct sockaddr_in6</code>\nAn IPv6 address.\nAn IPv6 socket address.\n<code>MSG_WAITALL</code>\n<code>SHUT_WR</code>—Disable further write operations.\n<code>accept(fd, NULL, NULL)</code>—Accepts an incoming connection.\n<code>accept4(fd, NULL, NULL, flags)</code>—Accepts an incoming …\n<code>accept(fd, &amp;addr, &amp;len)</code>—Accepts an incoming connection …\n<code>accept4(fd, &amp;addr, &amp;len, flags)</code>—Accepts an incoming …\nReturn the address family of this socket address.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the raw integer for this <code>SocketType</code>.\nReturns the raw integer for this <code>AddressFamily</code>.\nReturns the raw integer for this <code>Protocol</code>.\n<code>bind(sockfd, addr)</code>—Binds a socket to an IP address.\n<code>bind(sockfd, addr)</code>—Binds a socket to an address.\n<code>bind(sockfd, addr, sizeof(struct sockaddr_in))</code>—Binds a …\n<code>bind(sockfd, addr, sizeof(struct sockaddr_in6))</code>—Binds a …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>connect(sockfd, addr)</code>—Initiates a connection to an IP …\n<code>connect(sockfd, addr)</code>—Initiates a connection.\n…\n<code>connect(sockfd, addr, sizeof(struct sockaddr_in))</code>…\n<code>connect(sockfd, addr, sizeof(struct sockaddr_in6))</code>…\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\n<code>ETH_P_*</code> constants.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the flow information associated with this address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.\nCreates an <code>IpAddr::V6</code> from a sixteen element byte array.\nReturns the argument unchanged.\nCopies this address to a new <code>IpAddr::V4</code>.\nCopies this address to a new <code>IpAddr::V6</code>.\nCreates an <code>IpAddr::V4</code> from a four element byte array.\nReturns the argument unchanged.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nReturns the argument unchanged.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.\nReturns the argument unchanged.\nConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …\nConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nConstructs a <code>SocketType</code> from a raw integer.\nConstructs a <code>AddressFamily</code> from a raw integer.\nConstructs a <code>Protocol</code> from a raw integer.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\n<code>getpeername(fd, addr, len)</code>—Returns the address a socket …\n<code>getsockname(fd, addr, len)</code>—Returns the address a socket …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\n<code>IPPROTO_*</code> constants.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address.\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address.\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nReturns <code>true</code> for the special ‘unspecified’ address.\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\n<code>listen(fd, backlog)</code>—Enables listening for incoming …\nReturns the address’s multicast scope if the address is …\n<code>NETLINK_*</code> constants.\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nCreates a new socket address from an IP address and a port …\nCreates a new socket address from an <code>IPv4</code> address and a …\nCreates a new socket address from an <code>IPv6</code> address, a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nParse an IP address from a slice of bytes.\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nParse a socket address from a slice of bytes.\nParse an IPv4 socket address from a slice of bytes.\nParse an IPv6 socket address from a slice of bytes.\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReads a platform-specific encoding of a socket address from\n<code>recv(fd, buf, flags)</code>—Reads data from a socket.\n<code>recv(fd, buf, flags)</code>—Reads data from a socket.\n<code>recvfrom(fd, buf, flags, addr, len)</code>—Reads data from a …\n<code>recvfrom(fd, buf, flags, addr, len)</code>—Reads data from a …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the scope ID associated with this address.\nReturns the eight 16-bit segments that make up this …\n<code>send(fd, buf, flags)</code>—Writes data to a socket.\n<code>sendto(fd, buf, flags, addr)</code>—Writes data to a socket to …\n<code>sendto(fd, buf, flags, addr)</code>—Writes data to a socket to …\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_in))</code>…\n<code>sendto(fd, buf, flags, addr, sizeof(struct sockaddr_in6))</code>…\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChanges the flow information associated with this socket …\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the scope ID associated with this socket address.\n<code>shutdown(fd, how)</code>—Closes the read and/or write sides of …\n<code>socket(domain, type_, protocol)</code>—Creates a socket.\n<code>socket_with(domain, type_ | flags, protocol)</code>—Creates a …\n<code>getsockopt</code> and <code>setsockopt</code> functions.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>SYSPROTO_*</code> constants.\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWrites a platform-specific encoding of this socket address …\n<code>WSACleanup()</code>—Clean up process-wide Windows support for …\n<code>WSAStartup()</code>—Initialize process-wide Windows support for …\n<code>IPPROTO_AH</code>\n<code>IPPROTO_EGP</code>\n<code>IPPROTO_ESP</code>\n<code>IPPROTO_FRAGMENT</code>\n<code>IPPROTO_ICMP</code>\n<code>IPPROTO_ICMPV6</code>\n<code>IPPROTO_IDP</code>\n<code>IPPROTO_IGMP</code>\n<code>IPPROTO_IPV6</code>\n<code>IPPROTO_PIM</code>\n<code>IPPROTO_PUP</code>\n<code>IPPROTO_RAW</code>\n<code>IPPROTO_ROUTING</code>\n<code>IPPROTO_SCTP</code>\n<code>IPPROTO_TCP</code>\n<code>IPPROTO_UDP</code>\n<code>SO_RCVTIMEO</code>—Timeout for receiving.\n<code>SO_SNDTIMEO</code>—Timeout for sending.\nTimeout identifier for use with <code>set_socket_timeout</code> and …\nReturns the argument unchanged.\n<code>getsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_MULTICAST_TTL)</code>\n<code>getsockopt(fd, IPPROTO_IP, IP_TTL)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_HOPS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_LOOP)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS)</code>\n<code>getsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_ACCEPTCONN)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_BROADCAST)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_ERROR)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_KEEPALIVE)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_LINGER)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_OOBINLINE)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_RCVBUF)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_REUSEADDR)</code>\n<code>getsockopt(fd, SOL_SOCKET, SO_SNDBUF)</code>\n<code>getsockopt(fd, SOL_SOCKET, id)</code>—Get the sending or …\n<code>getsockopt(fd, SOL_SOCKET, SO_TYPE)</code>—Returns the type of …\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL)</code>\n<code>getsockopt(fd, IPPROTO_TCP, TCP_NODELAY)</code>\nCalls <code>U::from(self)</code>.\n…\n…\n<code>setsockopt(fd, IPPROTO_IP, IP_MULTICAST_LOOP, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_MULTICAST_TTL, value)</code>\n<code>setsockopt(fd, IPPROTO_IP, IP_TTL, value)</code>\n…\n…\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_MULTICAST_LOOP, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_UNICAST_HOPS, value)</code>\n<code>setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_BROADCAST, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_LINGER, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_OOBINLINE, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_RCVBUF, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, value)</code>—Set …\n<code>setsockopt(fd, SOL_SOCKET, SO_SNDBUF, value)</code>\n<code>setsockopt(fd, SOL_SOCKET, id, value)</code>—Set the sending or …\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, value)</code>\n<code>setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, value)</code>")